(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    386539,       8120]
NotebookOptionsPosition[    379285,       7887]
NotebookOutlinePosition[    379628,       7902]
CellTagsIndexPosition[    379585,       7899]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["rydberg-rydberg interactions", "Title",
 CellChangeTimes->{{3.811971011166643*^9, 3.8119710227062626`*^9}}],

Cell["P. Huft", "Text",
 CellChangeTimes->{{3.8119710266233625`*^9, 3.811971028517356*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.812036266427552*^9, 3.812036274565545*^9}, {
  3.812284206353174*^9, 3.812284215055832*^9}}],

Cell[CellGroupData[{

Cell["general setup", "Section",
 CellChangeTimes->{{3.8120428677841787`*^9, 3.8120428701943326`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "CONSTANTS", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"\[HBar]", "=", "1"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ee", "=", " ", "1.602*^-19"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"c", " ", "=", " ", 
     RowBox[{"3", "*", 
      SuperscriptBox["10", "8"]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Mu]0", " ", "=", 
     RowBox[{"4", "\[Pi]", "*", 
      SuperscriptBox["10", 
       RowBox[{"-", "7"}]]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Epsilon]0", " ", "=", " ", 
     RowBox[{"1", "/", 
      SqrtBox[
       RowBox[{"c", " ", "\[Mu]0"}]]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"qq", " ", "=", " ", 
     RowBox[{
      RowBox[{"ee", "^", "2"}], "/", 
      RowBox[{"(", 
       RowBox[{"4", " ", "\[Pi]", " ", "\[Epsilon]0"}], ")"}]}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "FUNCTIONS", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"OuterProd", "[", 
      RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
     RowBox[{"Outer", "[", 
      RowBox[{"Times", ",", "A", ",", "B"}], "]"}]}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "outer", " ", "product", " ", "of", " ", "vectors", " ", "or", " ", 
      "matrices", " ", "A"}], ",", "B"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"HamiltonianProduct", "[", 
      RowBox[{"hsingle_", ",", "volume_"}], " ", "]"}], ":=", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"totalham", "=", "hsingle"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "the", " ", "Hamiltonian", " ", "describing", " ", "the", " ", 
         "combined", " ", "space", " ", "of", " ", "`volume`", " ", "number", 
         " ", "of", " ", "quantum", " ", "systems", " ", "with", " ", 
         "individual", " ", "Hamiltonian", " ", "hsingle"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "<", "volume"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"totalham", " ", "=", " ", 
            RowBox[{
             RowBox[{"KroneckerProduct", "[", 
              RowBox[{
               RowBox[{"IdentityMatrix", "[", 
                RowBox[{"Length", "[", "hsingle", "]"}], "]"}], ",", 
               "totalham"}], "]"}], " ", "+", " ", 
             RowBox[{"KroneckerProduct", "[", 
              RowBox[{"hsingle", ",", 
               RowBox[{"IdentityMatrix", "[", 
                RowBox[{"Length", "[", "totalham", "]"}], "]"}]}], "]"}]}]}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "totalham"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
     "the", " ", "total", " ", "blockade", " ", "to", " ", "an", " ", "n"}], 
     "-", 
     RowBox[{
     "Rydberg", " ", "excited", " ", "state", " ", "due", " ", "to", " ", 
      "the", " ", "atoms", " ", "participating"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"BlockadeTerm", "[", 
     RowBox[{"atomIdcs_", ",", "blockadeTwoAtoms_"}], "]"}], ":=", 
    RowBox[{"Total", "[", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"blockadeTwoAtoms", "[", 
         RowBox[{
          RowBox[{"atomIdcs", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"atomIdcs", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Range", "[", 
           RowBox[{"Length", "[", "atomIdcs", "]"}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"1", "+", "i"}], ",", 
            RowBox[{"Length", "[", "atomIdcs", "]"}]}], "]"}]}], "}"}]}], 
       "]"}]}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"BlockadeHamiltonian", "[", 
      RowBox[{"atomNum_", ",", "blockade_"}], "]"}], ":=", 
     RowBox[{"Module", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"excitedList", "=", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], ",", "n", ",", "HBlockade"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "blockade", " ", "is", " ", "a", " ", "function", " ", "that", " ", 
         "takes", " ", "a", " ", "list", " ", "of", " ", "atom", " ", 
         "indices", " ", 
         RowBox[{"(", 
          RowBox[{"1", ",", 
           RowBox[{"2", "..."}]}], ")"}], " ", "and", " ", "return", " ", 
         "the", " ", "corresponding", " ", "blockade", " ", "between", " ", 
         "atoms"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"generate", " ", "list", " ", "of", " ", "Rydberg"}], "-", 
          RowBox[{
          "excited", " ", "atoms", " ", "at", " ", "each", " ", "index", " ", 
           "of", " ", "the", " ", 
           RowBox[{"basis", ".", " ", "for"}], " ", "now"}]}], ",", " ", 
         RowBox[{
          RowBox[{
          "this", " ", "assumes", " ", "a", " ", "system", " ", "of", " ", 
           "two"}], "-", 
          RowBox[{"level", " ", "atoms"}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "<", "atomNum"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"n", "=", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", "excitedList"}], ")"}], "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], "+", "1"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"AppendTo", "[", 
            RowBox[{"excitedList", ",", "n"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"oldLength", " ", "=", " ", 
            RowBox[{"Length", "[", "excitedList", "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"For", "[", 
            RowBox[{
             RowBox[{"j", "=", "2"}], ",", 
             RowBox[{"j", "<", "oldLength"}], ",", 
             RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"AppendTo", "[", 
               RowBox[{"excitedList", ",", 
                RowBox[{"Flatten", "@", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"excitedList", "[", 
                    RowBox[{"[", "j", "]"}], "]"}], ",", "n"}], "}"}]}]}], 
               "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"dim", " ", "=", " ", 
         RowBox[{"2", "^", "atomNum"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"HBlockade", " ", "=", " ", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"0", ",", 
           RowBox[{"{", 
            RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"k", "=", "1"}], ",", 
          RowBox[{"k", "<", 
           RowBox[{"dim", "+", "1"}]}], ",", 
          RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"atoms", " ", "=", " ", 
            RowBox[{"excitedList", "[", 
             RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"HBlockade", "[", 
             RowBox[{"[", 
              RowBox[{"k", ",", "k"}], "]"}], "]"}], "=", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "[", "atoms", "]"}], ">", "0"}], ",", 
              RowBox[{"blockade", "[", "atoms", "]"}], ",", "0"}], "]"}]}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        "HBlockade"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[CapitalOmega]BString", "[", 
      RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
     RowBox[{"StringForm", "[", 
      RowBox[{
      "\"\<\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)\>\"", ",", "i", ",", "j"}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.812042876027603*^9, 3.812042964583827*^9}, {
  3.8121491758728776`*^9, 3.8121491766349006`*^9}, {3.812326202154378*^9, 
  3.812326202309805*^9}, {3.8123745439342146`*^9, 3.8123746544708405`*^9}, {
  3.8123782524235086`*^9, 3.812378325500885*^9}, {3.812378403156784*^9, 
  3.812378500226215*^9}, {3.8123792243017817`*^9, 3.812379229306097*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["single Rydberg state", "Section",
 CellChangeTimes->{{3.811971059534021*^9, 3.811971074218193*^9}, {
  3.8119761202895975`*^9, 3.81197612582969*^9}, {3.8120319817610683`*^9, 
  3.812032003095702*^9}}],

Cell[CellGroupData[{

Cell["algebra", "Subsection",
 CellChangeTimes->{{3.8120320134004145`*^9, 3.812032015589334*^9}}],

Cell["\<\
Single atom dipole matrix elements to be computed with PairInteraction module \
in python. \
\>", "Text",
 CellChangeTimes->{{3.81197110386451*^9, 3.8119711740232415`*^9}, {
  3.8119757764858866`*^9, 3.8119757867270527`*^9}, {3.811976066784577*^9, 
  3.811976068590216*^9}, {3.811978425140011*^9, 3.8119784301619263`*^9}}],

Cell["\<\
Single atom structure: include two ground states, intermediate excited state, \
Rydberg state. Assume that large Zeeman shifts isolate an effective 4 level \
lambda system.\
\>", "Text",
 CellChangeTimes->{{3.8119760735956793`*^9, 3.8119761470999784`*^9}, {
  3.8119763400632763`*^9, 3.81197636915459*^9}}],

Cell[TextData[{
 "Matrix elems. reshape H into atoms*states x atoms*states. \n",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["H", 
     RowBox[{
      RowBox[{
       RowBox[{"4", " ", "atomi"}], " ", "-", " ", "statei", "+", "1"}], ",", 
      RowBox[{
       RowBox[{"4", "atomj"}], "-", "statej", "+", "1"}]}]], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["\[CapitalDelta]", "g1"], 
      SubscriptBox["\[Delta]", "ij"], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statei", ",", "1"}]], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statej", ",", "1"}]]}], "+", 
     RowBox[{
      SubscriptBox["\[CapitalDelta]", "g2"], 
      SubscriptBox["\[Delta]", "ij"], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statei", ",", "2"}]], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statej", ",", "2"}]]}], "+", 
     RowBox[{
      SubscriptBox["\[CapitalDelta]", "e"], 
      SubscriptBox["\[Delta]", "ij"], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statei", ",", "3"}]], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statej", ",", "3"}]]}], "+", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[HBar]\[CapitalOmega]", 
        RowBox[{"1", "A"}]], "(", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Delta]", "ij"], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statei", ",", "2"}]], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statej", ",", "3"}]]}], "+", 
        RowBox[{
         SubscriptBox["\[Delta]", "ij"], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statei", ",", "3"}]], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statej", ",", "2"}]]}]}], ")"}], "/", "2"}], "+", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[HBar]\[CapitalOmega]", 
        RowBox[{"1", "B"}]], "(", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Delta]", "ij"], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statei", ",", "1"}]], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statej", ",", "3"}]]}], "+", 
        RowBox[{
         SubscriptBox["\[Delta]", "ij"], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statei", ",", "3"}]], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statej", ",", "1"}]]}]}], ")"}], "/", "2"}], "+", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[HBar]\[CapitalOmega]", "2"], "(", 
       RowBox[{
        RowBox[{
         SubscriptBox["\[Delta]", "ij"], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statei", ",", "3"}]], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statej", ",", "4"}]]}], "+", 
        RowBox[{
         SubscriptBox["\[Delta]", "ij"], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statei", ",", "4"}]], 
         SubscriptBox["\[Delta]", 
          RowBox[{"statej", ",", "3"}]]}]}], ")"}], "/", "2"}], "+", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SubscriptBox["\[Delta]", "ij"]}], ")"}], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statei", ",", "4"}]], 
      SubscriptBox["\[Delta]", 
       RowBox[{"statej", ",", "4"}]], "Vdd"}]}]}], TraditionalForm]]],
 "\nComputationally more friendly to define a matrix Hij that describes the \
energy levels and coupling scheme of atom i, plus the interactions to atom j. \
Then just build Hfull by iterating over Hfull and plopping in Hij at each \
section atom x atom section.hmmm this is mixing a single atom basis with a \
two-atom basis... doesn\[CloseCurlyQuote]t really make sense as framed. "
}], "Text",
 CellChangeTimes->{{3.8119767666849937`*^9, 3.811976772461507*^9}, {
  3.8119770210380845`*^9, 3.811977361889329*^9}, {3.8119774099496436`*^9, 
  3.8119776907220573`*^9}, {3.812030058103647*^9, 3.8120300939914293`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Hi", " ", "=", 
    RowBox[{"(", GridBox[{
       {"0", "0", "\[CapitalOmega]1B", "0"},
       {"0", "\[CapitalDelta]g1", "\[CapitalOmega]1A", "0"},
       {
        RowBox[{"\[CapitalOmega]1B", "\[Conjugate]"}], 
        RowBox[{"\[CapitalOmega]1A", "\[Conjugate]"}], "\[CapitalDelta]e1", 
        "\[CapitalOmega]2"},
       {"0", "0", 
        RowBox[{"\[CapitalOmega]2", "\[Conjugate]"}], "\[CapitalDelta]r"}
      }], ")"}]}], ";"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.811977694380393*^9, 3.811977794086028*^9}, {
  3.81197784455519*^9, 3.811977904817491*^9}, {3.8119779430649643`*^9, 
  3.811977953583963*^9}, {3.811978059781856*^9, 3.8119780938794847`*^9}, {
  3.8119783149808874`*^9, 3.811978322010812*^9}, {3.812030041208006*^9, 
  3.812030046496875*^9}, {3.812030101409261*^9, 3.812030151921111*^9}}],

Cell["\<\
test building the hamiltonian with kronecker products using only two-level \
systems\
\>", "Text",
 CellChangeTimes->{{3.812030160145507*^9, 3.8120301790847583`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"H1", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]1", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]1", "/", "2"}], "\[CapitalDelta]1"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H2", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]2", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]2", "/", "2"}], "\[CapitalDelta]2"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H12", " ", "=", 
   RowBox[{
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", "2", "]"}], ",", "H1"}], "]"}], " ", "+",
     " ", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"H2", ",", 
      RowBox[{"IdentityMatrix", "[", "2", "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.8120301809072*^9, 3.812030242193406*^9}, {
   3.812030284454749*^9, 3.8120303132042327`*^9}, 3.8120303994139166`*^9, {
   3.812030630722088*^9, 3.8120306480422354`*^9}, {3.8120308617508698`*^9, 
   3.812030863104282*^9}, {3.8120315966550913`*^9, 3.8120316124931498`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]2"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812030237354156*^9, 3.812030242521632*^9}, {
   3.8120302954932985`*^9, 3.8120303135118318`*^9}, 3.8120303998924*^9, 
   3.8120306504940243`*^9, 3.812030863797557*^9, 3.8120316131481867`*^9}]
}, Open  ]],

Cell["Now three atoms:", "Text",
 CellChangeTimes->{{3.8120307225666714`*^9, 3.8120307558840237`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"H3", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]3", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]3", "/", "2"}], "\[CapitalDelta]3"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{
     RowBox[{"IdentityMatrix", "[", "2", "]"}], ",", "H12"}], "]"}], " ", "+",
    " ", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{"H3", ",", 
     RowBox[{"IdentityMatrix", "[", "4", "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.8120307473209925`*^9, 3.8120308353709655`*^9}, {
  3.8120308676428714`*^9, 3.8120308994836316`*^9}, {3.8120312352229805`*^9, 
  3.8120312439130335`*^9}, {3.81203167518322*^9, 3.812031706909399*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0"},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]2"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"]},
     {
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", "\[CapitalDelta]3", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]3"}], "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {"0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]3"}], 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812030886670458*^9, 3.8120309027320185`*^9}, 
   3.8120312445475373`*^9, 3.812031710251564*^9}]
}, Open  ]],

Cell[TextData[{
 "What is the basis of this Hamiltonian?\n",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"123", "g"}], ",", 
     RowBox[{"1", "e"}], ",", 
     RowBox[{"2", "e"}], ",", 
     RowBox[{"12", "e"}], ",", 
     RowBox[{"3", "e"}], ",", 
     RowBox[{"13", "e"}], ",", 
     RowBox[{"23", "e"}], ",", 
     RowBox[{"123", "e"}]}], "}"}], TraditionalForm]]],
 "\nThe singly-excited state is given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "/", 
      SqrtBox["3"]}], ")"}], 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
      "0"}], "}"}]}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.8120312779991755`*^9, 3.812031451649247*^9}, {
  3.8120315338940687`*^9, 3.8120315692131248`*^9}, {3.812031748887643*^9, 
  3.8120317823897038`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["rabi flopping - two level example", "Subsection",
 CellChangeTimes->{{3.8120320269110794`*^9, 3.812032045999884*^9}, {
  3.812149200707573*^9, 3.8121492050945826`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "single", " ", "atom", " ", "Hamiltonian", " ", "with", " ", "effective", 
    " ", "basis", " ", 
    RowBox[{"{", 
     RowBox[{"g", ",", "e"}], "}"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"\[CapitalOmega]", ",", "\[CapitalDelta]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numStates", "=", "2"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"single", " ", "atom", " ", "states"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numAtoms", " ", "=", " ", "2"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"atomBasis", " ", "=", " ", 
     RowBox[{"IdentityMatrix", "[", "numStates", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Hsingle", "=", 
     RowBox[{"(", GridBox[{
        {"0", 
         RowBox[{"\[CapitalOmega]", "/", "2"}]},
        {
         RowBox[{"\[CapitalOmega]", "/", "2"}], "\[CapitalDelta]"}
       }], ")"}]}], ";"}], 
   RowBox[{"(*", 
    RowBox[{"assume", " ", "real", " ", "Rabi", " ", 
     RowBox[{"freq", "."}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Hint", " ", "=", " ", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"numAtoms", " ", "numStates"}], ",", 
         RowBox[{"numAtoms", " ", "numStates"}]}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Hint", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"numAtoms", " ", "numStates"}], ",", 
        RowBox[{"numAtoms", " ", "numStates"}]}], "]"}], "]"}], "=", 
     "\[CapitalOmega]B"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"interaction", " ", "Hamiltonian"}], "*)"}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.8120321199097586`*^9, 3.8120321377282906`*^9}, {
  3.812032183183058*^9, 3.812032287377491*^9}, {3.812032367147503*^9, 
  3.812032497202208*^9}, {3.812032977459511*^9, 3.8120330534591637`*^9}, {
  3.812033121977349*^9, 3.8120331525833473`*^9}, {3.8120333271320696`*^9, 
  3.812033344197033*^9}, {3.812041862540533*^9, 3.812041915684704*^9}, {
  3.8120419747087965`*^9, 3.812041974783596*^9}, {3.8120423451808767`*^9, 
  3.812042345343083*^9}, {3.8120430097897882`*^9, 3.812043040954068*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"two", "-", 
    RowBox[{"atom", " ", "hamiltonian"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Hmulti", " ", "=", 
     RowBox[{
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"IdentityMatrix", "[", "numStates", "]"}], ",", "Hsingle"}], 
       "]"}], "+", 
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{"Hsingle", ",", 
        RowBox[{"IdentityMatrix", "[", "numStates", "]"}]}], "]"}]}]}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{"Hmulti", "//", "MatrixForm"}]}]}]], "Input",
 CellChangeTimes->{{3.8120322033613386`*^9, 3.8120322069105406`*^9}, {
  3.812032268489911*^9, 3.812032310948084*^9}, {3.8120323444763346`*^9, 
  3.812032357765974*^9}, {3.8120331602403135`*^9, 3.812033185926959*^9}, {
  3.8120419182485723`*^9, 3.8120419245665865`*^9}, {3.8120420333338375`*^9, 
  3.812042038006017*^9}, {3.812042260076003*^9, 3.812042289399713*^9}, {
  3.8120423724678497`*^9, 3.812042381137885*^9}, {3.812043132663271*^9, 
  3.812043149317305*^9}, {3.8120432532287703`*^9, 3.81204325423442*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "\[Pi]", "\[Pi]", "0"},
     {"\[Pi]", "0", "0", "\[Pi]"},
     {"\[Pi]", "0", "0", "\[Pi]"},
     {"0", "\[Pi]", "\[Pi]", "0"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.812032207259726*^9, 3.812032241695924*^9, {3.8120323417333837`*^9, 
   3.8120323580565414`*^9}, 3.812033081771367*^9, 3.812033156313499*^9, 
   3.8120331894534035`*^9, 3.81203335567986*^9, 3.812033407982769*^9, 
   3.8120419283079996`*^9, 3.812041981480033*^9, 3.8120420397464933`*^9, 
   3.812042346915263*^9, 3.8120424846827636`*^9, 3.812042517294767*^9, 
   3.8121492427610426`*^9, 3.8147932186052866`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Build", " ", "the", " ", "initial", " ", "array", " ", "state", " ", 
    "and", " ", "eqs", " ", "to", " ", "solve"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"\[CapitalOmega]", "=", 
     RowBox[{"2", "\[Pi]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalDelta]", "=", "0"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[CapitalOmega]B", "=", 
     RowBox[{"10", "\[CapitalOmega]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"hamiltonian", " ", "=", " ", 
     RowBox[{"Hmulti", "+", "Hint"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Psi]", " ", "=", " ", 
     RowBox[{"Array", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["P", "#"], "[", "t", "]"}], "&"}], ",", 
       RowBox[{"numAtoms", " ", "numStates"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\[Psi]0", " ", "=", " ", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"numAtoms", " ", "numStates"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Psi]0", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "=", "1"}], ";", 
    RowBox[{"(*", 
     RowBox[{
     "start", " ", "with", " ", "all", " ", "atoms", " ", "in", " ", "ground",
       " ", "state"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"eqs", " ", "=", " ", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"system", " ", "to", " ", "solve"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"ics", " ", "=", " ", 
     RowBox[{"{", "}"}]}], ";", 
    RowBox[{"(*", 
     RowBox[{"initial", " ", "conditions"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"i", "=", "1"}], ",", 
      RowBox[{"i", "<", 
       RowBox[{
        RowBox[{"numAtoms", " ", "numStates"}], "+", "1"}]}], ",", 
      RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"eqs", ",", 
         RowBox[{
          RowBox[{"D", "[", 
           RowBox[{
            RowBox[{"\[Psi]", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "t"}], "]"}], "\[Equal]", 
          RowBox[{"\[ImaginaryI]", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"hamiltonian", ".", "\[Psi]"}], ")"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"ics", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"\[Psi]", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "/.", 
            RowBox[{"t", "\[Rule]", "0"}]}], ")"}], "\[Equal]", 
          RowBox[{"\[Psi]0", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sys", " ", "=", " ", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Join", "[", 
       RowBox[{"eqs", ",", "ics"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Psi]", ",", "\[Psi]0", ",", "sys"}], "}"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"tmax", "=", "2"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"time", ",", "soln"}], "}"}], "=", " ", 
     RowBox[{"Timing", "[", 
      RowBox[{"First", "@", 
       RowBox[{"NDSolve", "[", 
        RowBox[{"sys", ",", " ", "\[Psi]", ",", " ", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "tmax"}], "}"}]}], "]"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"StringForm", "[", 
      RowBox[{"\"\<Time to run sim: `` mins\>\"", ",", 
       RowBox[{"Floor", "[", 
        RowBox[{
         RowBox[{"time", "/", "60"}], "//", "N"}], "]"}]}], "]"}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"soln", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"soln", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "soln", "]"}], "]"}]}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.8120326310307016`*^9, 3.812032717415327*^9}, {
   3.8120327519451046`*^9, 3.812032766185772*^9}, 3.812032802698085*^9, 
   3.81203296317837*^9, {3.8120330900433073`*^9, 3.8120331055650053`*^9}, {
   3.812033200974555*^9, 3.8120332434824085`*^9}, {3.812033277939681*^9, 
   3.81203332205126*^9}, {3.8120334901584063`*^9, 3.812033500978674*^9}, 
   3.812033539184661*^9, {3.8120335959741964`*^9, 3.8120336038399963`*^9}, {
   3.812033760698806*^9, 3.8120337835128117`*^9}, {3.812033871982972*^9, 
   3.8120338723573837`*^9}, {3.8120345945584507`*^9, 3.812034623601763*^9}, {
   3.812035215194293*^9, 3.812035233047205*^9}, {3.812035270672146*^9, 
   3.8120352785507517`*^9}, {3.8120359619125443`*^9, 3.812035962731064*^9}, {
   3.8120360527905293`*^9, 3.8120361454757648`*^9}, {3.812036311573468*^9, 
   3.812036360055635*^9}, 3.8120364783405857`*^9, {3.8120419406238565`*^9, 
   3.812041941820767*^9}, {3.81479356605363*^9, 3.814793566583889*^9}, {
   3.8147935991931124`*^9, 3.814793678026719*^9}, {3.8147937220198603`*^9, 
   3.8147937387522907`*^9}, {3.814793780332354*^9, 3.8147937805756316`*^9}}],

Cell[BoxData[
 InterpretationBox["\<\"Time to run sim: \\!\\(\\*RowBox[{\\\"0\\\"}]\\) mins\
\"\>",
  StringForm["Time to run sim: `` mins", 0],
  Editable->False]], "Print",
 CellChangeTimes->{{3.8120363142204657`*^9, 3.812036360455145*^9}, 
   3.8120364788619933`*^9, 3.8120419439446926`*^9, {3.8120423368862314`*^9, 
   3.812042360445403*^9}, 3.8121492464971733`*^9, 3.814793151560233*^9, 
   3.8147932240436115`*^9, 3.814793567653468*^9, {3.8147935996063557`*^9, 
   3.8147936784214134`*^9}, {3.8147937233838573`*^9, 3.814793738964574*^9}, 
   3.814793781149295*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"leg", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"g\", \"1\"], 
SubscriptBox[\"g\", \"2\"]}]},
\"Ket\"]\)\>\"", ",", 
     "\"\<\!\(\*FractionBox[\(1\), \
SqrtBox[\(2\)]]\)(\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"r\", \"1\"], 
SubscriptBox[\"g\", \"2\"]}]},
\"Ket\"]\)+\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"g\", \"1\"], 
SubscriptBox[\"r\", \"2\"]}]},
\"Ket\"]\))\>\"", ",", "\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"r\", \"1\"], 
SubscriptBox[\"r\", \"2\"]}]},
\"Ket\"]\)\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"plt", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     SuperscriptBox[
      RowBox[{"Abs", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"soln", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"soln", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "+", 
            RowBox[{"soln", "[", 
             RowBox[{"[", "3", "]"}], "]"}]}], ")"}], "/", 
          RowBox[{"Sqrt", "[", "2", "]"}]}], ",", 
         RowBox[{"soln", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "}"}], "]"}], "2"], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "tmax"}], "}"}], ",", 
    RowBox[{"PlotLegends", "\[Rule]", "leg"}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", " ", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"StringForm", "[", 
        RowBox[{"\"\<\!\(\*TemplateBox[{\"g\"},
\"Ket\"]\)\[LongLeftRightArrow]\!\(\*TemplateBox[{\"r\"},
\"Ket\"]\) Rabi Oscillations, `` atoms, \
\!\(\*SubscriptBox[\(\[CapitalOmega]\), \(B\)]\)=``\[CapitalOmega]\>\"", ",", 
         "numAtoms", ",", 
         RowBox[{"\[CapitalOmega]B", "/", "\[CapitalOmega]"}]}], "]"}], ",", 
       "Black", ",", 
       RowBox[{"FontSize", "\[Rule]", "14"}]}], "]"}]}], ",", 
    RowBox[{"LabelStyle", "\[Rule]", 
     RowBox[{"Directive", "[", 
      RowBox[{"Black", ",", 
       RowBox[{"FontSize", "\[Rule]", "12"}]}], "]"}]}], ",", 
    RowBox[{"Axes", "\[Rule]", " ", "False"}], ",", 
    RowBox[{"Frame", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<t/\[CapitalOmega]\>\"", ",", "\"\<Probability\>\""}], 
      "}"}]}], ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"StringForm", "[", 
       RowBox[{
       "\"\<plot_rabi_flop_``atoms_``states_blockaded``.png\>\"", ",", 
        "numAtoms", ",", "numStates", ",", 
        RowBox[{"\[CapitalOmega]B", "/", "\[CapitalOmega]"}]}], "]"}], "]"}], 
     ",", "plt"}], "]"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.814793346127821*^9, 3.814793377208661*^9}, {
  3.8147934491781225`*^9, 3.8147934586452117`*^9}, {3.814793520037032*^9, 
  3.814793540080923*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
WFpO8EzqNmOGczJedJmK49Hf9K1uN2M2WtqMg5NAkUIW/WZwMx5Gl/tL7yHw
J5LgF49uhjRXQ1OPNAGWNfuODaQ0Y7Uxii3kCZxo/OBlXNwM2+98OlwqBEos
32+7Mt4MmcY6joRrBD6N3L5tyGhGyOQ59kZjAnEWR76asbRg9Int9p7rBDxv
tF29x9eC70XGHsFWBBwH45Pttrfgy/i7JmV7AjfM7ecfSLbgfON3+boHBFRN
ucM8jrUgTFxE0dudgMLf3hHv0y0gzF/8+exJYI9xuoK/Vguqxs0ii58T2GCo
/jvUvAXraA7PHr4iUHfFc0u6bwsycwRybSLJfNsvWnwKbkGXWtW/yBgCmXoi
ublRLRh41OudHk/gtW6hXulncj1X3vSdFAIezX4fKgta8LVRZUAwnYD9Rf2Z
msoWqKYFGaZlErh0YS64vYu8X19RxjqbwJn6Cko3pQURHlmpMV8I/Hc+WK6f
1gIOwzkiO4+AZK251/B8C17MCHIkfyUgcE6mdWJVKyZDXPlcvxNgr2YVn+Rs
habM6ObDhQTmz9Y7zG5pRc2pmN3VRQTGfkb8WBRpxbA2r75KCYEu1bubVu5r
hatue/H7UgI1FUevs8m3Iuba17vtZQQKTrNnc5xoRVpdtu3UDwLpP9pX8aq3
YoTbZIBeTiBS5YPOFl1y/6bQ1voKAgGlDnFCRq0ovSVm8KqSgJuyypTIrVZE
y7D4yvwkYFPMoyJp14r6CvX7X0hsevxv4L5HrdA9pScj9IvAxcKM/kPPWrHq
YlazOYlVlB7L/PeqFe0X/1j5k1j2u4aH4rtWiDz8vCWMxGLHtjUpx7diukmw
/xmJ+b+OiKhmtMImW7pfj8RrjuTanstrhZmp9D52Es/kepVol7ZCa9yzJYK8
f1hel+dyTSsK0gJom0j8O0fU1KCtFbc2y72yIuP/dfjfR9O/rTgrwvErhcwv
/3MRq8UYeZ5TU9ovMv8UmZcX7k63Qm/X3fPVZH3CswyibZdbYXJooDiTrJ/v
QSn6/XVtiNS+uuUBWd9HmfPHH/G2IVbFwlyErP+9Az8Dngi1IYJfISeD5Mco
PeTPM4k2mGDj9h0kf1r7bkj7HWwDb5Buqh3J76G9K+tDTrUhte3x4zJSD6LJ
DcLvz7dBec9sXzGpF77dUVYxV9rA4qGcGkPqaVpckSvtbhsMzLiiOT8SUOpT
rvB50AZTuR0BZqQevd6rulp4tEFh6vK2EFKv/Hw6hOjbNjz7kKsSRurZsO7K
B9a4NkRFSC/cIvWe4GNk1Jvehpv5hk+2kP0gx3q7LqysDdMP/Q/xhBJ4/M36
2YM6Mh5tLjuDIALl9x1xqaMNWRGbMp4FENCjumdw09owcGGDjJM3gQedoS+9
t7XDMenH9gZHsr+CI87cEG9HVjmjj8+WAJt23PLJg+3YJTNcIX+XwNvKDKvl
0+0Qt2yZ32pG8pFdft7Rth0Rkp6seucIrLCpXqvzqB3tj7/+CjxD4KxUY+FB
73YkS+xJyThBoDOm+8DE+3a8N5aOfnqYAPPlFJf5z3YE/NHLiNlG6k19vuJE
czvmpCPftPGR/K1hcRPubUddopTJGAcBoUfraR1T7bj3p9Mzg3wPlSxF6i/s
+I3g8+rCSX+pcFXRCsD936gNXMlyNZKKymVdVaEnv3F5cVjZKZiKjV+vsSz4
/oZvgs2Qox8VUQdvWufE/MbR0S9HOR5SUbT9sda+2t/wuXTVN16HihVzKRu3
iXWg5khI9hNWKrbVKE/iQAfaf3C5Ks9MQDb6d4u5Qgc4hWrpA+MTuK629l36
uQ6cFzYbaWibQOVbUzFlxw7cSpOc1kidwMsjAkduVXRg2dL3V8P5CQi6eJl9
udUJs/5NE+/dx3FYS+h0l10nfrX02jbYjUNz12dJ1sed+Dh2Smf0+jhcq/9O
nH3dCbj4F1erjaNPUPFBT34nRg5NfLi8cRxJ3yd9V2/owr6K6Y6s0DHILRvn
XEwn8fJ8ZknIKDTOFT05ldsFB82xLM1nozB7J3xevqQL3M6XKOWOowiQ7xna
2tqFtKVbyS66oxixuibQt9gFdZbmHSt5RhH+R9fF+lw3rj8Zbkl4NgLWkrPK
fuPd+Dp3iTXgxjCqn8rWlu/phairC5vZwiCEA8bmkqh/4Nt3Imz0vz8Ym+nt
aZHuQ+p90doGlxbk3HxZclauD2YinSuunm+BW5tSQuHRPihafzq6uLMF/F/e
30063YeIpyfkgyuayXnmGtNFvw/rWHisBPmaETbVKrDLuw9vTha4lWc1QpVe
o2Pb2wcm84nER7Z68Jo8+m9ooA/VvI832RfUoadeSlB/tA/Uo1676m7XwT7z
Rf+p6T6s1f8rYlZRi0grNVuB9f2A+K6WjU9qwJgoe1kk1493ueVbpldXIW70
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
iQ==
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJwUV3c8198XJg0rlK2ISJKkbOGxs8kmyd7zQ2jICC1KkviGJAlJKHtkE5K9
18feqdBCv8/vr/freb3PPc9zzj333nN4bL0MHHaRkZHdpSQj+/9X02G+s3rB
QX4qmVPdzOGKzG5lDu9xdhVshHT0KtTkyok+T0h6z24EZbfH4nNuq3LTh/lC
A/itYMKxMOomxiiv9bm/IJndHvXRil3H9ITl+aI4X/074oLy8n91udeU5Lc0
7Z7a8HuCT/zfRBCvofxieE+9TbwPPiQFpP77YCNvav+zMpbdD/0hl4fDBT3l
65U5iuuS/HEmIpJm4EigvAivXN76kau423H+1qBFmHzSLuusYy+vo1lx0PxY
9z15ysmwNBP+mzjApW1psRErXzbR9bnOKAQOPVFhD+n+k/fWt9e0jA/FybPr
m1XXX8jzV280rveH4eMx0b4HfzPkR0/fVo5mD0fPpbyjNjlv5eOes1UfuxiB
Xgdj0+mhAnlN+mzZqqRIdHIxln1ILZYnCz5XajJ2Gz63Tv3nJlcpX7TaJv71
yF2Yy7mMf5qqkXe3siq4bXMPzgLn+DTfNMgfbf8qzP3yPqa7itMvkrfID8iF
vimZjoJi9NU7tt/b5R+8PShwgf8BTFRvX7il2iWvypmevuD0EJ0iHIK87r3y
Nxv/Y6gxigGtbS5V+Y8BefObU7rRGzE4VrA6RDs1Ii8mIRRtHv8Iff8t7PNI
nZCnX/VrPSYZC+84ppUtqin5xVeVVN/7Y3H+1J+Ft/kz8g2X9qpXBT6GQNz+
hl3P5uVTmfUi77HHwfKSlJj/pyX565+f1puUxcEq6RDLVYWv8iYRE7t4Lz5B
QnD5r6rQb/Jn5E4ofv37BLNrpvFb937I0274BJcnxaNjNps5t3JDfi6nrPK2
3FOkxr6/fPPQL/lae4otw7GnMOWjPcOQ8Uc+sCcucPlIInh7LZ02eclgGDVa
VFKdCJ5OPyaRfHIIq/BvhNv8h0tDySJLphSYfl/sw/nyGWy/sKxVre/FRzey
vAXlJFiVBFhJLlPiP16N1cLpJOSbPbNc+keNC4+HXHX5U1BR+unGxZv0ENLi
zeJoSsHIOw1n1g0GUFK4z806PcccZU6JuMxBXC7dyf9olIqc8CrH5e9M0Gbm
7Tz2KhURDVKM044skPE5v3Z/IxVHE5ooOhZZwXwiRtgs/gXmIoqV9/Eewq6I
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
hIOXcJ2Zu/dcrzlyyGcjRcOXMMJT7dVIqv89nz1vSN1dgvLbSqGEP+awSvjp
I/dgCXyUyqdqGSxQbBfipPSYxO/ekWx8wgIMp6kunU9YwpVk5SI7FQs4/3lk
oJ28hJoAx7UtGwvUNHCoX0hbAmvn8sqpMAtwPHopZ/J6CVUKody7XlmAYCkk
ejFnCVkSK6vhLRZoPV4oYJ2/hEmGpx9qvluA74ccl0PREp65+9TUcV5EUFUj
o2v5Eoj9RIl4rYvou6tH5VW9hE07+iOKNy7iNrfNemDLEiqD6H+Izl7ExNLC
QtCXJYj0nReJOGIJqWLCeFjPEtxYNV7UXLTEok54S9TYEui8ir/SjFpCmX1/
9aOpJZyLjhA7dPQSkqafFMbPL8HO4dEKm+sl6Fx/nZr6fQm2b8rLe3ZZIUNN
JP7VzyX8ZImpiTK0ws6B0vvZW0uo5vTp539thbzMFv8Pe5fBYsc6RDS5DMa+
Fe1mjmW8j/1hkONmDfcX/kqfjyyjj7xCnua5Nerd/0l28S3jhugd1Xfd1vCn
OMA7IrwM80sdL9IVbDAoIvb7q9IyyLhMNDQFbPH8/rVXrG7LGHh11+QXnz1O
Ku7bcSxfxiVOqkgfX2fkZb85PlC9jGOHzaRuVzpDjEn/gkbjMsyUsrMZ97lA
di4h/WTnMm6rBWcoJLhAN1pQa212GSXegZ1v81zRtdnuZ7O8DI1HNhwq664w
tfZN6fq2DNtT4n7vJdxgLVrx7cPWMpwToxe6it1AGNRJuHpwBRMxA4dOZLlj
U+l7zSLrCnJKzyinEN1xPSd+6SLnCirMWgud2DwQHjwuLy+wgqAi0eSqEA9Q
LtxyfndqBTpDdM/FCzwQbSAQyy26AveCu1EdRA/EH/OZ2SW/AtOQ7XXVc57g
eMhM76e8gkLej5PUDp54/qtUakZ9BVevqNxpi/IEn62VrYkuyZ7qsGhEgScy
W3dFNRmuQGtLmv10nyeExF8XSpmvoPT6tFn9T0/kpWiNZ1mtYD6L4rc8qxdK
feLORrmsYOXf72c9el6QH5ay3PZcgUo03dVVZy/UqoxGePqR+BlFCXPBXlDL
DX03fpUUz+M59Y9xXmhh5R/UD15Bwg/uD1dee0E3tGVXbfgKQhTUi2lKvNC9
6Ckkem8FGhpNJyIbvWBmxGiS/nAFmUF9sYtdXhipLA5mfrKC2R6ra/KjXrA+
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
         "]]}}}, {}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 4.320863216892699*^-27}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, False}, {True, False}}, FrameLabel -> {{
        FormBox["\"Probability\"", TraditionalForm], None}, {
        FormBox["\"t/\[CapitalOmega]\"", TraditionalForm], None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], LabelStyle -> Directive[
       GrayLevel[0], FontSize -> 12], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, PlotLabel -> FormBox[
       StyleBox[
        InterpretationBox[
        "\"\\!\\(\\*TemplateBox[{\\\"g\\\"},\\n\\\"Ket\\\"]\\)\
\[LongLeftRightArrow]\\!\\(\\*TemplateBox[{\\\"r\\\"},\\n\\\"Ket\\\"]\\) Rabi \
Oscillations, \\!\\(\\*FormBox[\\\"2\\\", TraditionalForm]\\) atoms, \
\\!\\(\\*SubscriptBox[\\(\[CapitalOmega]\\), \
\\(B\\)]\\)=\\!\\(\\*FormBox[\\\"10\\\", \
TraditionalForm]\\)\[CapitalOmega]\"", 
         StringForm[
         "\!\(\*TemplateBox[{\"g\"},\n\
\"Ket\"]\)\[LongLeftRightArrow]\!\(\*TemplateBox[{\"r\"},\n\"Ket\"]\) Rabi \
Oscillations, `` atoms, \!\(\*SubscriptBox[\(\[CapitalOmega]\), \(B\)]\)=``\
\[CapitalOmega]", 2, 10], Editable -> False], 
        GrayLevel[0], FontSize -> 14, StripOnInput -> False], 
       TraditionalForm], PlotRange -> {All, All}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\"g\\\", \\\"1\\\"], \
SubscriptBox[\\\"g\\\", \\\"2\\\"]}]},\\n\\\"Ket\\\"]\\)\"", 
       "\"\\!\\(\\*FractionBox[\\(1\\), \
SqrtBox[\\(2\\)]]\\)(\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\"r\\\", \\\
\"1\\\"], SubscriptBox[\\\"g\\\", \
\\\"2\\\"]}]},\\n\\\"Ket\\\"]\\)+\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\
\"g\\\", \\\"1\\\"], SubscriptBox[\\\"r\\\", \
\\\"2\\\"]}]},\\n\\\"Ket\\\"]\\))\"", 
       "\"\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\"r\\\", \\\"1\\\"], \
SubscriptBox[\\\"r\\\", \\\"2\\\"]}]},\\n\\\"Ket\\\"]\\)\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          Directive[
           GrayLevel[0], FontSize -> 12], FontFamily -> "Arial"}, Background -> 
         Automatic, StripOnInput -> False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"Directive", "[", 
               RowBox[{
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                   Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                   Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                   With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  GrayLevel[0], Editable -> False, Selectable -> False], ",", 
                 RowBox[{"FontSize", "\[Rule]", "12"}]}], "]"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.8147933833633404`*^9, {3.814793555232978*^9, 3.8147935722160234`*^9}, {
   3.814793606349529*^9, 3.8147936797663574`*^9}, {3.8147937259380283`*^9, 
   3.8147937405304213`*^9}, 3.8147937849738626`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"leg", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"g\", \"1\"], 
SubscriptBox[\"g\", \"2\"]}]},
\"Ket\"]\)\>\"", ",", "\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"r\", \"1\"], 
SubscriptBox[\"g\", \"2\"]}]},
\"Ket\"]\)\>\"", ",", "\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"g\", \"1\"], 
SubscriptBox[\"r\", \"2\"]}]},
\"Ket\"]\)\>\"", ",", "\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"r\", \"1\"], 
SubscriptBox[\"r\", \"2\"]}]},
\"Ket\"]\)\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"plt", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     SuperscriptBox[
      RowBox[{"Abs", "[", "soln", "]"}], "2"], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "tmax"}], "}"}], ",", 
    RowBox[{"PlotLegends", "\[Rule]", "leg"}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", " ", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"StringForm", "[", 
        RowBox[{
        "\"\<Rabi Oscillations, `` atoms, \
\!\(\*SubscriptBox[\(\[CapitalOmega]\), \(B\)]\)=``\[CapitalOmega]\>\"", ",", 
         "numAtoms", ",", 
         RowBox[{"\[CapitalOmega]B", "/", "\[CapitalOmega]"}]}], "]"}], ",", 
       "Black", ",", 
       RowBox[{"FontSize", "\[Rule]", "14"}]}], "]"}]}], ",", 
    RowBox[{"LabelStyle", "\[Rule]", 
     RowBox[{"Directive", "[", 
      RowBox[{"Black", ",", 
       RowBox[{"FontSize", "\[Rule]", "12"}]}], "]"}]}], ",", 
    RowBox[{"Axes", "\[Rule]", " ", "False"}], ",", 
    RowBox[{"Frame", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<t/\[CapitalOmega]\>\"", ",", "\"\<Probability\>\""}], 
      "}"}]}], ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"ToString", "[", 
      RowBox[{"StringForm", "[", 
       RowBox[{
       "\"\<plot_rabi_flop_``atoms_``states_blockaded``.png\>\"", ",", 
        "numAtoms", ",", "numStates", ",", 
        RowBox[{"\[CapitalOmega]B", "/", "\[CapitalOmega]"}]}], "]"}], "]"}], 
     ",", "plt"}], "]"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8120339387180862`*^9, 3.8120340067756634`*^9}, {
   3.8120342152885523`*^9, 3.8120342441158876`*^9}, {3.812034383659404*^9, 
   3.812034462421711*^9}, {3.812034659984968*^9, 3.812034966108579*^9}, {
   3.812035014877201*^9, 3.812035190703578*^9}, {3.8120352433652563`*^9, 
   3.812035246081111*^9}, {3.8120353286570177`*^9, 3.8120353628028383`*^9}, {
   3.812035570358143*^9, 3.8120355710723085`*^9}, {3.812036322547566*^9, 
   3.812036326010353*^9}, 3.8120419514564247`*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJwUW3k8VO8bHTMSKmuFkkqiRYvIFnNuC0qbyhYlRF/ZiiSVIklZsyc7WZJI
ooRkqSzJkuz7LsuMbDP23/zmnzvnM/e9z3nOc573vu/n/cxW0xvnzckkEonG
TiL9/8o8aRuldeMmNWx6mfWhw8NMake15BkEi5xrbGPhX7Q+S19JI6ApJ+sW
C6eua41tjryGwRSDh9+W6Bj/cNTHWtIWMo5vFKoX6diwsyFvudEeB46w9Qct
0KHq5CVTHumIbT0GfgLzdBiXUpMDTe7h1soxlZOzdLitnxS9JPkQvSO/51QZ
dPzOvFAeOO2KP+Jr6oan6DBr2ePOaHRDguWj2nMTdEyzceJSrjvoD+bIt+gs
vjt7ZgsjPbCc8f32mVE6hM7lZ213eYYhEXmVviE6XjuF3vAy8QJ/hIulXD8d
P0s1+y9I+uH2kbYL7O10pN8R0LrE7g/u1G+H3JvouOPtkuY37Q/20X39BXV0
cH64aDHZGIghG71us3I6an78+L69PAgBh+/Y1JTQ8bJFdpt+bjAWtxdLM77Q
sYvM05EfGYrnFwtLHd/TMbHu/iG67wtU3eQbrH5DR97OobCtLmGIX/GtsO8V
HafOFV/wMAnH6x5RxSMhdNyIdSw/KxmNtwZDlTUOdChm9Uq6CcWgZv3dg6ut
6SCZ7ThiwB4Lk88zaexX6Si/ExLjMx2LyeYPQXu06DCIuWHwrzEeT0/VrjCX
ooO6U9LTS+sVqmK7Ev1E6RD/0PZpW/krKPDost/hp2Pkx4l1urkJqEifGXCf
o8GZtq0mNzIJxV2j9pHlNBg7tSxdWJcMUcP3i8X5NBwjB+wZ803G1/xzOm/e
0bBm/ZLXZpfXYMz5uOcH0xCt2qTmbvIGPIfGv8wY0lDk45N3WjIdOvlfeVZ2
jqFguLlyVUo6nuQd+TxVOYb841Id5bvfQSy3kSM6dwyGZBPSK+EMxDTqa20P
GYNOwbz4ZrH3YL6sNxPUGIOmvIyF0M4PUKVxTrdGj0JWMnJiJT7hYLtSSPXW
ERyoPzJ/zfUTuuuLxPdwjmC/+1/Kj6JPOBSSdFePNoy9PfLr3I/l4NqRX2zr
coexI7pWgaT5GWJR18lqZ4chun7lA6Z2HsYT6h9x2P3FCg77lX8tv2KlnnJy
Wugghk648E4mf0VEhmbL+N1BVPj6CC32fUWyn0y7yOVBlHrVBT3bV4iOyYcv
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
0/KaQvyuWTly6J0cdNVJHYNvWPl8sXmuWXMAS7vlF8nvKESLV+cjkaG9+C1W
68P3nkJgY9Nn+8HdSOa3FhX7QCHYtYLiaJt3wpl95dvd2RTCJO6V7ns/SWgx
4g4pfWL5LSn96vh+CUgMq/xU/0whnF3M2ico4mC2NRpo57HyueTuwr9iCyqr
7YdNvlCI/AttQTZXRRFXvObeja8U4n6k26ECHhE4Zr/melBEIW7t5s+WWbke
mq+PvvQqoRBWQr0dnMcFIRbRsSPsO4WI23TdJKmSDxO+d3MSS1n69c5wbt66
Bj9c1x7/UE4hItRckzvFuBBx611j4U/W71KfSw54rcDNa5r/Vf2iEPw5q/K5
DMk4drF/prWaQpx/eT5JXXCZKnzK1eNvLYU452j/UWjTHHWUunE9o45CBHlv
Klb+Pk0tlPmYyN5AIcKlKtOXF/9RQyTOHRRoohBhtFjORIcxqqXQ6LfNLSzs
3uxxp3WQSuV+qr2njUKIuNKdioR7qQKLW/uUOyjEWTWVMF7pDuoAPf/W8S4K
ccT9SvVa50Zqbo8eRbeHQqh4yGd7ztZSn9dPBF7toxCXrjIk8hcrqGZlvuJ2
AxSiV/abNaO2hKqYtyPz4RCFeL5t6MTmy/nU1eklh32GKYTNBUXDgPQP1K5Y
o9qXo6z+3PzDzuvCG2pW0KxxMo3Vn/dDGu3+xFI9PYLHs8ZZ8wc56OAnnWCq
0d19rsUTFMLJNrP9RqMH9YB1BW/NFIXwFz/YK6p2h8pxxTymfYZCNOrRb6S8
NqO2nCP9r2IzD6ey68I4eZ7zCGV6E0kDUZEpShnOWkpKISQkKRLKWEmIkClR
hijzm4oyV6YyZlbKlClFZMh8UEJe+c73576uva+19n3f6/ffkh1fYEM9oWz2
5loderZGfNnCHybfiqycpERk6H5Ke3Vpy2zoeHSThwPLspqJZEsP/wobfmv5
45snGaK2S8TeYSsrgVcMKJPRqmQ1Fh5qWYaNwDG2zKDMy2z0tlWPQ1VJAoUE
+x3ujsnTn8+pbjxKEZhHjPHGdejRvUY6M4xXE5j5wMvLsdCabvDlisoFTgLV
V0vlB4q60yUa1zRcWUMgfbI67Zn5bfqft89NfbgJ9I0c45LwiaY35h4cu8tL
4JeOIUt6ZjL9llreUAQ/gdHpipectTLoe+u29UevI1Di4freB7J59DG96K+x
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
Oe3M80vj+vmVFQoTKwQ7WVim4X9t5Dgy
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
qh4=
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
qh4=
         "]]}, {
        Directive[
         Opacity[1.], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
n8kdfZ3/AZoLfR0=
         "]]}}}, {}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 2.1861992140247318`*^-26}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, False}, {True, False}}, FrameLabel -> {{
        FormBox["\"Probability\"", TraditionalForm], None}, {
        FormBox["\"t/\[CapitalOmega]\"", TraditionalForm], None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], LabelStyle -> Directive[
       GrayLevel[0], FontSize -> 12], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, PlotLabel -> FormBox[
       StyleBox[
        InterpretationBox[
        "\"Rabi Oscillations, \\!\\(\\*FormBox[\\\"2\\\", TraditionalForm]\\) \
atoms, \\!\\(\\*SubscriptBox[\\(\[CapitalOmega]\\), \
\\(B\\)]\\)=\\!\\(\\*FormBox[\\\"0\\\", TraditionalForm]\\)\[CapitalOmega]\"", 
         StringForm[
         "Rabi Oscillations, `` atoms, \
\!\(\*SubscriptBox[\(\[CapitalOmega]\), \(B\)]\)=``\[CapitalOmega]", 2, 0], 
         Editable -> False], 
        GrayLevel[0], FontSize -> 14, StripOnInput -> False], 
       TraditionalForm], PlotRange -> {All, All}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
      "\"\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\"g\\\", \\\"1\\\"], \
SubscriptBox[\\\"g\\\", \\\"2\\\"]}]},\\n\\\"Ket\\\"]\\)\"", 
       "\"\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\"r\\\", \\\"1\\\"], \
SubscriptBox[\\\"g\\\", \\\"2\\\"]}]},\\n\\\"Ket\\\"]\\)\"", 
       "\"\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\"g\\\", \\\"1\\\"], \
SubscriptBox[\\\"r\\\", \\\"2\\\"]}]},\\n\\\"Ket\\\"]\\)\"", 
       "\"\\!\\(\\*TemplateBox[{RowBox[{SubscriptBox[\\\"r\\\", \\\"1\\\"], \
SubscriptBox[\\\"r\\\", \\\"2\\\"]}]},\\n\\\"Ket\\\"]\\)\""}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
          Directive[
           GrayLevel[0], FontSize -> 12], FontFamily -> "Arial"}, Background -> 
         Automatic, StripOnInput -> False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.922526, 0.385626, 0.209179]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"Directive", "[", 
               RowBox[{
                 InterpretationBox[
                  ButtonBox[
                   TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"], 
                   Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                   Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                   With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                   Automatic, Method -> "Preemptive"], 
                  GrayLevel[0], Editable -> False, Selectable -> False], ",", 
                 RowBox[{"FontSize", "\[Rule]", "12"}]}], "]"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8120348460180254`*^9, 3.8120348614983006`*^9}, {
   3.8120350377553368`*^9, 3.8120350501641417`*^9}, {3.8120351651371155`*^9, 
   3.812035191176264*^9}, {3.812035238601058*^9, 3.8120352464778843`*^9}, 
   3.812035283499307*^9, {3.812035340352313*^9, 3.8120353637812185`*^9}, 
   3.8120355787968903`*^9, 3.8120360004339266`*^9, {3.8120360634148664`*^9, 
   3.8120361554432697`*^9}, {3.81203632902205*^9, 3.81203636293923*^9}, 
   3.812036481524906*^9, 3.8120419520965557`*^9, 3.8120423624314804`*^9, 
   3.8121492482364674`*^9, 3.814793227851906*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["rabi flopping - 2 or more atoms in uniform blockade ", "Subsection",
 CellChangeTimes->{{3.8121492565737705`*^9, 3.812149312790799*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", 
   RowBox[{"\[CapitalOmega]", ",", "\[CapitalDelta]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"numStates", "=", "2"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"single", " ", "atom", " ", "states"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"numAtoms", " ", "=", " ", "4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"atomBasis", " ", "=", " ", 
   RowBox[{"IdentityMatrix", "[", "numStates", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Hsingle", "=", 
    RowBox[{"(", GridBox[{
       {"0", 
        RowBox[{"\[CapitalOmega]", "/", "2"}]},
       {
        RowBox[{"\[CapitalOmega]", "/", "2"}], "\[CapitalDelta]"}
      }], ")"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"assume", " ", "real", " ", "Rabi", " ", 
    RowBox[{"freq", "."}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"construct", " ", "interaction", " ", "Hamiltonian"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Hint", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numAtoms", " ", "numStates"}], ",", 
       RowBox[{"numAtoms", " ", "numStates"}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.812149361585094*^9, 3.8121494228966303`*^9}, {
  3.8123262879309053`*^9, 3.8123262891588817`*^9}, {3.8123785323179865`*^9, 
  3.812378565220337*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Build", " ", "the", " ", "initial", " ", "array", " ", "state", " ", 
    "and", " ", "eqs", " ", "to", " ", "solve"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"\[CapitalOmega]", "=", 
     RowBox[{"2", "\[Pi]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"\[CapitalDelta]", "=", "0"}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"\[CapitalOmega]B", "[", 
     RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
    RowBox[{"10", "\[CapitalOmega]"}]}], ";", " ", 
   RowBox[{"(*", 
    RowBox[{"uniform", " ", "blockade", " ", "between"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{"hamiltonian", " ", "=", " ", 
    RowBox[{
     RowBox[{"HamiltonianProduct", "[", 
      RowBox[{"Hsingle", ",", "numAtoms"}], "]"}], "//", "MatrixForm", 
     RowBox[{"(*", 
      RowBox[{"+", " ", 
       RowBox[{"BlockadeHamiltonian", "[", 
        RowBox[{"numAtoms", ",", 
         RowBox[{"BlockadeTerm", "[", 
          RowBox[{
           RowBox[{"#", "&"}], ",", "\[CapitalOmega]B"}], "]"}]}], "]"}]}], 
      "*)"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.812378567080959*^9, 3.8123786029589586`*^9}, {
  3.812378933597166*^9, 3.812378938356674*^9}, {3.812379000628388*^9, 
  3.812379040656468*^9}, {3.812379111966037*^9, 3.812379198849242*^9}, {
  3.812379239687259*^9, 3.8123792725119953`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "\[CapitalDelta]", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", "0", "0", "0", "0", "0", 
      "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", "0", 
      "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"3", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"4", " ", "\[CapitalDelta]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812379240332156*^9, 3.812379273298311*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Psi]", " ", "=", " ", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["P", "#"], "[", "t", "]"}], "&"}], ",", 
     RowBox[{"numAtoms", " ", "numStates"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Psi]0", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"numAtoms", " ", "numStates"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[Psi]0", "[", 
    RowBox[{"[", "1", "]"}], "]"}], "=", "1"}], ";", 
  RowBox[{"(*", 
   RowBox[{
   "start", " ", "with", " ", "all", " ", "atoms", " ", "in", " ", "ground", 
    " ", "state"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"eqs", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";", 
  RowBox[{"(*", 
   RowBox[{"system", " ", "to", " ", "solve"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"ics", " ", "=", " ", 
   RowBox[{"{", "}"}]}], ";", 
  RowBox[{"(*", 
   RowBox[{"initial", " ", "conditions"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "<", 
     RowBox[{
      RowBox[{"numAtoms", " ", "numStates"}], "+", "1"}]}], ",", 
    RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"eqs", ",", 
       RowBox[{
        RowBox[{"D", "[", 
         RowBox[{
          RowBox[{"\[Psi]", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", "t"}], "]"}], "\[Equal]", 
        RowBox[{"\[ImaginaryI]", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"hamiltonian", ".", "\[Psi]"}], ")"}], "[", 
          RowBox[{"[", "i", "]"}], "]"}]}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"ics", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"\[Psi]", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "/.", 
          RowBox[{"t", "\[Rule]", "0"}]}], ")"}], "\[Equal]", 
        RowBox[{"\[Psi]0", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}]}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sys", " ", "=", " ", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Join", "[", 
     RowBox[{"eqs", ",", "ics"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\[Psi]", ",", "\[Psi]0", ",", "sys"}], "}"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"tmax", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"time", ",", "soln"}], "}"}], "=", " ", 
   RowBox[{"Timing", "[", 
    RowBox[{"First", "@", 
     RowBox[{"NDSolve", "[", 
      RowBox[{"sys", ",", " ", "\[Psi]", ",", " ", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "tmax"}], "}"}]}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", 
   RowBox[{"StringForm", "[", 
    RowBox[{"\"\<Time to run sim: `` mins\>\"", ",", 
     RowBox[{"Floor", "[", 
      RowBox[{
       RowBox[{"time", "/", "60"}], "//", "N"}], "]"}]}], "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"soln", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"soln", "[", 
      RowBox[{"[", 
       RowBox[{"i", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", "soln", "]"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.812378567080959*^9, 3.8123786029589586`*^9}, {
  3.812378933597166*^9, 3.812378938356674*^9}, {3.812379000628388*^9, 
  3.812379040656468*^9}, {3.812379111966037*^9, 3.812379112968446*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"leg", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"g\", \"1\"], 
SubscriptBox[\"g\", \"2\"]}]},
\"Ket\"]\)\>\"", ",", "\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"r\", \"1\"], 
SubscriptBox[\"g\", \"2\"]}]},
\"Ket\"]\)\>\"", ",", "\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"g\", \"1\"], 
SubscriptBox[\"r\", \"2\"]}]},
\"Ket\"]\)\>\"", ",", "\"\<\!\(\*TemplateBox[{RowBox[{
SubscriptBox[\"r\", \"1\"], 
SubscriptBox[\"r\", \"2\"]}]},
\"Ket\"]\)\>\""}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"plt", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     SuperscriptBox[
      RowBox[{"Abs", "[", "soln", "]"}], "2"], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "tmax"}], "}"}], ",", 
    RowBox[{"PlotLegends", "\[Rule]", "leg"}], ",", 
    RowBox[{"PlotLabel", "\[Rule]", " ", 
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"StringForm", "[", 
        RowBox[{
        "\"\<Rabi Oscillations, `` atoms, \
\!\(\*SubscriptBox[\(\[CapitalOmega]\), \(B\)]\)=``\[CapitalOmega]\>\"", ",", 
         "numAtoms", ",", 
         RowBox[{"\[CapitalOmega]B", "/", "\[CapitalOmega]"}]}], "]"}], ",", 
       "Black", ",", 
       RowBox[{"FontSize", "\[Rule]", "14"}]}], "]"}]}], ",", 
    RowBox[{"LabelStyle", "\[Rule]", 
     RowBox[{"Directive", "[", 
      RowBox[{"Black", ",", 
       RowBox[{"FontSize", "\[Rule]", "12"}]}], "]"}]}], ",", 
    RowBox[{"Axes", "\[Rule]", " ", "False"}], ",", 
    RowBox[{"Frame", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"True", ",", "True", ",", "False", ",", "False"}], "}"}]}], ",", 
    RowBox[{"FrameLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<t/\[CapitalOmega]\>\"", ",", "\"\<Probability\>\""}], 
      "}"}]}], ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], "Input"],

Cell["", "Text"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["multiple Rydberg states", "Section",
 CellChangeTimes->{{3.8124114178118296`*^9, 3.8124114227290764`*^9}}],

Cell[TextData[{
 "Now we take into account an atom with multiple Rydberg states, including \
fine structure. We will still assume sufficient detuning on the two-photon \
transition to merit disregard of the intermediate ladder state.\n\nStart with \
a 4 level atom: one ground state, three nearby Rydberg states. \nSingle atom \
basis: g, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["r", "\[Alpha]"], ",", " ", 
    SubscriptBox["r", "\[Beta]"], ",", " ", 
    SubscriptBox["r", "\[Gamma]"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". "
}], "Text",
 CellChangeTimes->{{3.81241143328765*^9, 3.812411519190938*^9}, {
  3.81241159427326*^9, 3.812411681538905*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Haf1", "=", " ", 
    RowBox[{"(", GridBox[{
       {"0", "0", 
        RowBox[{"\[CapitalOmega]\[Beta]1", "/", "2"}], "0"},
       {"0", "\[CapitalDelta]\[Alpha]1", "0", "0"},
       {
        RowBox[{"\[CapitalOmega]\[Beta]1", "/", "2"}], "0", 
        "\[CapitalDelta]\[Beta]1", "0"},
       {"0", "0", "0", "\[CapitalDelta]\[Gamma]1"}
      }], ")"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"atom", " ", "+", " ", 
    RowBox[{"driving", " ", "field"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Haf2", "=", " ", 
   RowBox[{"(", GridBox[{
      {"0", "0", 
       RowBox[{"\[CapitalOmega]\[Beta]2", "/", "2"}], "0"},
      {"0", "\[CapitalDelta]\[Alpha]2", "0", "0"},
      {
       RowBox[{"\[CapitalOmega]\[Beta]2", "/", "2"}], "0", 
       "\[CapitalDelta]\[Beta]2", "0"},
      {"0", "0", "0", "\[CapitalDelta]\[Gamma]2"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{
     RowBox[{"IdentityMatrix", "[", "4", "]"}], ",", "Haf1"}], "]"}], "+", 
   RowBox[{"KroneckerProduct", "[", 
    RowBox[{"Haf2", ",", 
     RowBox[{"IdentityMatrix", "[", "4", "]"}]}], "]"}]}], "//", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.812413500492757*^9, 3.812413614388363*^9}, {
  3.8124136447296352`*^9, 3.812413730675482*^9}, {3.8124138526130743`*^9, 
  3.8124139406146183`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0", "0", 
      "0", "0"},
     {"0", "\[CapitalDelta]\[Alpha]1", "0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0", "0", 
      "0"},
     {
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0", 
      "\[CapitalDelta]\[Beta]1", "0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0", "0"},
     {"0", "0", "0", "\[CapitalDelta]\[Gamma]1", "0", "0", "0", "0", "0", "0",
       "0", 
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0"},
     {"0", "0", "0", "0", "\[CapitalDelta]\[Alpha]2", "0", 
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0", "0", "0", "0", "0", 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", 
      RowBox[{"\[CapitalDelta]\[Alpha]1", "+", "\[CapitalDelta]\[Alpha]2"}], 
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0", 
      RowBox[{"\[CapitalDelta]\[Alpha]2", "+", "\[CapitalDelta]\[Beta]1"}], 
      "0", "0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", 
      RowBox[{"\[CapitalDelta]\[Alpha]2", "+", "\[CapitalDelta]\[Gamma]1"}], 
      "0", "0", "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0", "0", 
      "0", "0", "\[CapitalDelta]\[Beta]2", "0", 
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0", "0", "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0", "0", 
      "0", "0", 
      RowBox[{"\[CapitalDelta]\[Alpha]1", "+", "\[CapitalDelta]\[Beta]2"}], 
      "0", "0", "0", "0", "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0", 
      RowBox[{"\[CapitalDelta]\[Beta]1", "+", "\[CapitalDelta]\[Beta]2"}], 
      "0", "0", "0", "0", "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]2", "2"], "0", "0", "0", "0", "0", 
      "0", "0", 
      RowBox[{"\[CapitalDelta]\[Beta]2", "+", "\[CapitalDelta]\[Gamma]1"}], 
      "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "\[CapitalDelta]\[Gamma]2", "0", 
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      RowBox[{"\[CapitalDelta]\[Alpha]1", "+", "\[CapitalDelta]\[Gamma]2"}], 
      "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]\[Beta]1", "2"], "0", 
      RowBox[{"\[CapitalDelta]\[Beta]1", "+", "\[CapitalDelta]\[Gamma]2"}], 
      "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", 
      RowBox[{"\[CapitalDelta]\[Gamma]1", "+", "\[CapitalDelta]\[Gamma]2"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8124137243282185`*^9, 3.812413731027482*^9}, 
   3.812413885298745*^9, {3.8124139283246393`*^9, 3.8124139408730745`*^9}}]
}, Open  ]],

Cell["see if it\[CloseCurlyQuote]s tractable to diagonalize this thing \
quickly", "Text",
 CellChangeTimes->{{3.812560186354424*^9, 3.81256021321309*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"\[CapitalOmega]\[Beta]", "=", 
     RowBox[{"2", "\[Pi]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"\[CapitalDelta]\[Alpha]", " ", "=", " ", 
     RowBox[{"\[CapitalDelta]\[Beta]", "=", 
      RowBox[{"\[CapitalDelta]\[Gamma]", "=", "10"}]}]}], ";"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "\[CapitalOmega]\[Beta]", ",", "\[CapitalDelta]\[Beta]", ",", 
      "\[CapitalDelta]\[Gamma]", ",", "\[CapitalDelta]\[Alpha]"}], "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Haf1", "=", " ", 
     RowBox[{"(", GridBox[{
        {"0", "0", 
         RowBox[{"\[CapitalOmega]\[Beta]", "/", "2"}], "0"},
        {"0", "\[CapitalDelta]\[Alpha]", "0", "0"},
        {
         RowBox[{"\[CapitalOmega]\[Beta]", "/", "2"}], "0", 
         "\[CapitalDelta]\[Beta]", "0"},
        {"0", "0", "0", "\[CapitalDelta]\[Gamma]"}
       }], ")"}]}], ";"}], 
   RowBox[{"(*", 
    RowBox[{"atom", " ", "+", " ", 
     RowBox[{"driving", " ", "field"}]}], "*)"}]}]}]], "Input",
 CellChangeTimes->{{3.8125601498183556`*^9, 3.812560182520564*^9}, {
   3.812560222001629*^9, 3.8125602859451785`*^9}, {3.8125603314052176`*^9, 
   3.812560596589125*^9}, {3.81256063041803*^9, 3.8125606434669795`*^9}, 
   3.8125609982404537`*^9, {3.812561262189927*^9, 3.812561304717839*^9}, 
   3.8125615848811097`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "2"}], ",", 
   RowBox[{"i", "<", "6"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", 
      RowBox[{
       RowBox[{"Timing", "[", 
        RowBox[{"Eigensystem", "[", 
         RowBox[{"HamiltonianProduct", "[", 
          RowBox[{"Haf1", ",", "i"}], "]"}], "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.8125601498183556`*^9, 3.812560182520564*^9}, {
   3.812560222001629*^9, 3.8125602859451785`*^9}, {3.8125603314052176`*^9, 
   3.812560596589125*^9}, {3.81256063041803*^9, 3.8125606434669795`*^9}, 
   3.8125609982404537`*^9, {3.812561262189927*^9, 3.812561304717839*^9}, 
   3.8125615848811097`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "0.328125`"}], "}"}]], "Print",
 CellChangeTimes->{{3.8125606115092044`*^9, 3.8125606446450424`*^9}, 
   3.8125612967633677`*^9}],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.812560636771304*^9, 3.8125610019433503`*^9, 
  3.812561299870541*^9}]
}, Open  ]],

Cell["\<\
Write a routine to prune out the n-excited basis states from the matrix. \
\>", "Text",
 CellChangeTimes->{{3.812560705187538*^9, 3.8125607492630234`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Length", "[", 
   RowBox[{"HamiltonianProduct", "[", 
    RowBox[{"Haf1", ",", "2"}], "]"}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"atom", "-", 
    RowBox[{"field", " ", 
     RowBox[{"Ham", "."}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.812560751713483*^9, 3.812560764863998*^9}, {
  3.8125608135060797`*^9, 3.81256083796276*^9}, {3.8125612214024367`*^9, 
  3.812561257890847*^9}, {3.812561631477818*^9, 3.812561637463664*^9}, {
  3.8125654021669445`*^9, 3.812565414156686*^9}}],

Cell[BoxData["16"], "Output",
 CellChangeTimes->{
  3.8125612532364216`*^9, {3.8125616233201427`*^9, 3.812561638075369*^9}, 
   3.812565414618984*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nExcited", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"excitedList", " ", "=", " ", 
  RowBox[{"Flatten", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"atomIdcs", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", 
       RowBox[{"atomIdcs", "[", 
        RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", "atomIdcs", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{"1", "+", "i"}], ",", 
         RowBox[{"Length", "[", "atomIdcs", "]"}]}], "]"}]}], "}"}]}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"For", " "}]}], "Input",
 CellChangeTimes->{{3.812560751713483*^9, 3.812560764863998*^9}, {
  3.8125608135060797`*^9, 3.81256083796276*^9}, {3.8125612214024367`*^9, 
  3.8125612482348394`*^9}, {3.812561550952099*^9, 3.812561576816923*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "i", "]"}]], "Input",
 CellChangeTimes->{{3.812560477475689*^9, 3.8125604791651974`*^9}}],

Cell["\<\
could build the interaction with brute force. need to generate the basis \
first. \
\>", "Text",
 CellChangeTimes->{{3.812414219463213*^9, 3.812414285625105*^9}, {
  3.8124143326270366`*^9, 3.812414338872325*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sbasis", "=", 
   RowBox[{"{", 
    RowBox[{"g", ",", "\[Alpha]", ",", "\[Beta]", ",", "\[Gamma]"}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.812414361725629*^9, 3.8124143643109703`*^9}, {
  3.8124144281903267`*^9, 3.8124144902401004`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OuterProd", "[", 
  RowBox[{"sbasis", ",", "sbasis"}], "]"}]], "Input",
 CellChangeTimes->{{3.812414476007797*^9, 3.812414498422366*^9}, {
  3.8124145351641793`*^9, 3.81241453722192*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SuperscriptBox["g", "2"], ",", 
     RowBox[{"g", " ", "\[Alpha]"}], ",", 
     RowBox[{"g", " ", "\[Beta]"}], ",", 
     RowBox[{"g", " ", "\[Gamma]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", " ", "\[Alpha]"}], ",", 
     SuperscriptBox["\[Alpha]", "2"], ",", 
     RowBox[{"\[Alpha]", " ", "\[Beta]"}], ",", 
     RowBox[{"\[Alpha]", " ", "\[Gamma]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", " ", "\[Beta]"}], ",", 
     RowBox[{"\[Alpha]", " ", "\[Beta]"}], ",", 
     SuperscriptBox["\[Beta]", "2"], ",", 
     RowBox[{"\[Beta]", " ", "\[Gamma]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"g", " ", "\[Gamma]"}], ",", 
     RowBox[{"\[Alpha]", " ", "\[Gamma]"}], ",", 
     RowBox[{"\[Beta]", " ", "\[Gamma]"}], ",", 
     SuperscriptBox["\[Gamma]", "2"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.812414498806214*^9}]
}, Open  ]],

Cell["\<\
need outer-product-like function that combines bases. then we can generate \
the matrix element at each pair of these. probably ask Mark if there is a \
smarter way to do this simulation.\
\>", "Text",
 CellChangeTimes->{{3.8124145393492346`*^9, 3.81241459766381*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"statecombos", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "<", "4"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"j", "=", "1"}], ",", 
     RowBox[{"j", "<", "4"}], ",", 
     RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"statecombos", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"sbasis", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"sbasis", "[", 
          RowBox[{"[", "j", "]"}], "]"}]}], "}"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"sbasis", "[", 
      RowBox[{"[", "i", "]"}], "]"}], ",", 
     RowBox[{"sbasis", "[", 
      RowBox[{"[", "j", "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"Range", "[", "4", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", 
     RowBox[{"Range", "[", "4", "]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.81241460037663*^9, 3.8124147531853895`*^9}, {
  3.812414791983062*^9, 3.8124148471566*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"g", ",", "g"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"g", ",", "\[Alpha]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"g", ",", "\[Beta]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"g", ",", "\[Gamma]"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "g"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "\[Alpha]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "\[Beta]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "\[Gamma]"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "g"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "\[Alpha]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "\[Beta]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "\[Gamma]"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Gamma]", ",", "g"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Gamma]", ",", "\[Alpha]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Gamma]", ",", "\[Beta]"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Gamma]", ",", "\[Gamma]"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8124146725323644`*^9}]
}, Open  ]],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.8124114256495457`*^9, 3.8124114313131213`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["misc testing", "Section",
 CellChangeTimes->{{3.8120321084963675`*^9, 3.8120321102933493`*^9}}],

Cell["\<\
write recursive function to build multi-atom Hamiltonian by successively \
combining the single atom subspaces.\
\>", "Text",
 CellChangeTimes->{{3.8120415288154936`*^9, 3.812041535984572*^9}, {
  3.812041587269907*^9, 3.8120416176735716`*^9}, {3.8120417391966004`*^9, 
  3.8120417518785205`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "single", " ", "atom", " ", "Hamiltonian", " ", "with", " ", "effective", 
    " ", "basis", " ", 
    RowBox[{"{", 
     RowBox[{"g", ",", "e"}], "}"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"\[CapitalOmega]", ",", "\[CapitalDelta]"}], "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numStates", "=", "2"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"single", " ", "atom", " ", "states"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"numAtoms", " ", "=", " ", "2"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"H1", "=", 
     RowBox[{"(", GridBox[{
        {"0", 
         RowBox[{"\[CapitalOmega]", "/", "2"}]},
        {
         RowBox[{"\[CapitalOmega]", "/", "2"}], "\[CapitalDelta]"}
       }], ")"}]}], ";"}], 
   RowBox[{"(*", 
    RowBox[{"assume", " ", "real", " ", "Rabi", " ", 
     RowBox[{"freq", "."}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"H2int", " ", "=", " ", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{"0", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"numAtoms", " ", "numStates"}], ",", 
         RowBox[{"numAtoms", " ", "numStates"}]}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"H2int", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"numAtoms", " ", "numStates"}], ",", 
        RowBox[{"numAtoms", " ", "numStates"}]}], "]"}], "]"}], "=", 
     "\[CapitalOmega]B"}], ";"}], " ", 
   RowBox[{"(*", 
    RowBox[{"interaction", " ", "Hamiltonian"}], "*)"}]}]}]], "Input"],

Cell["", "Text",
 CellChangeTimes->{{3.8119775825855646`*^9, 3.8119775841089497`*^9}}],

Cell["\<\
test building the hamiltonian with kronecker products using only two-level \
systems\
\>", "Text",
 CellChangeTimes->{{3.812030160145507*^9, 3.8120301790847583`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"H1", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]1", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]1", "/", "2"}], "\[CapitalDelta]1"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H2", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]2", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]2", "/", "2"}], "\[CapitalDelta]2"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H12", " ", "=", 
   RowBox[{
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H2", "]"}], "]"}], ",", "H1"}], "]"}], " ", 
    "+", " ", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"H2", ",", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H1", "]"}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.8120301809072*^9, 3.812030242193406*^9}, {
   3.812030284454749*^9, 3.8120303132042327`*^9}, 3.8120303994139166`*^9, {
   3.812030630722088*^9, 3.8120306480422354`*^9}, {3.8120308617508698`*^9, 
   3.812030863104282*^9}, {3.8120315966550913`*^9, 3.8120316124931498`*^9}, {
   3.8120435629524364`*^9, 3.812043593457759*^9}, {3.8121464717802377`*^9, 
   3.8121464824561515`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]2"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812030237354156*^9, 3.812030242521632*^9}, {
   3.8120302954932985`*^9, 3.8120303135118318`*^9}, 3.8120303998924*^9, 
   3.8120306504940243`*^9, 3.812030863797557*^9, 3.8120316131481867`*^9, 
   3.8120435944071245`*^9, 3.812043882828279*^9, 3.8120447220752897`*^9, {
   3.8121464620461693`*^9, 3.812146483744306*^9}, 3.8122842628079524`*^9}]
}, Open  ]],

Cell["Now add the blockade:", "Text",
 CellChangeTimes->{{3.81204360759052*^9, 3.8120436193915653`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"H12int", " ", "=", " ", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"Dimensions", "[", "H12", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"H12int", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{"-", "1"}], ",", 
        RowBox[{"-", "1"}]}], "]"}], "]"}], "=", "\[CapitalOmega]B12"}], 
    ";"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"H12", "=", 
     RowBox[{"H12", "+", "H12int"}]}], ";"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"H12", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.812043623825844*^9, 3.812043788093379*^9}, {
  3.812043861935777*^9, 3.8120438747787476`*^9}, {3.8120447142107286`*^9, 
  3.8120447172817783`*^9}, {3.812146502597024*^9, 3.8121465103835826`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]2"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812043722121538*^9, 3.8120437889551544`*^9}, {
   3.81204386847375*^9, 3.8120438848457694`*^9}, {3.812146503225752*^9, 
   3.8121465108624706`*^9}, 3.812284267178783*^9}]
}, Open  ]],

Cell["Now three atoms:", "Text",
 CellChangeTimes->{{3.8120307225666714`*^9, 3.8120307558840237`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"H3", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]3", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]3", "/", "2"}], "\[CapitalDelta]3"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H123", "=", 
   RowBox[{
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H1", "]"}], "]"}], ",", "H12"}], "]"}], " ", 
    "+", " ", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"H3", ",", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H12", "]"}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"H123", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.8120307473209925`*^9, 3.8120308353709655`*^9}, {
   3.8120308676428714`*^9, 3.8120308994836316`*^9}, {3.8120312352229805`*^9, 
   3.8120312439130335`*^9}, {3.81203167518322*^9, 3.812031706909399*^9}, {
   3.8120438179156284`*^9, 3.8120438555389147`*^9}, {3.8120438969209423`*^9, 
   3.8120438982403865`*^9}, {3.8120439343885374`*^9, 3.812043941961232*^9}, 
   3.8121466140602674`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0"},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]2"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"]},
     {
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", "\[CapitalDelta]3", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]3"}], "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {"0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]3"}], 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812030886670458*^9, 3.8120309027320185`*^9}, 
   3.8120312445475373`*^9, 3.812031710251564*^9, 3.812043793095872*^9, 
   3.812043903545542*^9, 3.812043943173005*^9, 3.8120447281193933`*^9, 
   3.8121466678075924`*^9, 3.8121468370830927`*^9, 3.812284272987739*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
  RowBox[{"8", "..."}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "1", ";", "2", ";", "12", ";", "3", ";", "13", ";", "23", ";", "123", ";", 
    "4", ";"}], ".."}], " ", 
  RowBox[{"(*", 
   RowBox[{"essentially", " ", "counts", " ", "in", " ", "binary"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"blockade", " ", "on", " ", "3"}], ",", "5", ",", "6", ",", "7", 
  ",", "9", ",", "10", ",", "11", ",", "12", ",", 
  RowBox[{
   RowBox[{"...", " ", "no", " ", "blockade", " ", "on", " ", 
    RowBox[{"2", "^", "n"}]}], ";", " ", 
   RowBox[{
   "but", " ", "this", " ", "is", " ", "not", " ", "does", 
    " "}]}]}]}], "Input",
 CellChangeTimes->{{3.8122842994137125`*^9, 3.8122844339728646`*^9}, {
  3.812284487348472*^9, 3.812284533401999*^9}, {3.812284564118578*^9, 
  3.812284572976612*^9}, {3.8123211250769043`*^9, 3.812321165273513*^9}},
 EmphasizeSyntaxErrors->True],

Cell["\<\
Want to generate sequence \
{0,1,2,{1,2},3,{1,3},{2,3},{1,2,3},4,{1,4},{2,4},{1,2,4},{3,4},{1,3,4},{2,3,4}\
,{1,2,3,4}...};  it\[CloseCurlyQuote]s recursive

with 1 atom it\[CloseCurlyQuote]s {0,1}
2nd atom part is: {0,1,2,{1,2}} which is just taking 2 and combining with \
each element of previous list then appending onto end of {0,1}
repeat: append {3,{1,3},{2,3},{1,2,3}} to list 2, etc. \
\>", "Text",
 CellChangeTimes->{{3.8122845924624977`*^9, 3.8122846041231613`*^9}, {
  3.812321236112686*^9, 3.8123213014322095`*^9}, {3.8123214032502804`*^9, 
  3.812321406736663*^9}, {3.812321643036647*^9, 3.81232196616086*^9}, {
  3.812322334082972*^9, 3.8123223452996345`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"listn", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"n", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Flatten", "@", "listn"}], ")"}], "[", 
     RowBox[{"[", 
      RowBox[{"-", "1"}], "]"}], "]"}], "+", "1"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"AppendTo", "[", 
  RowBox[{"listn", ",", "n"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AppendTo", "[", 
  RowBox[{"listn", ",", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"listn", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "n"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"2", ",", 
          RowBox[{
           RowBox[{"Length", "[", "listn", "]"}], "-", "1"}]}], "]"}]}], 
       "}"}]}], "]"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.812322349757517*^9, 3.812322399803362*^9}, {
   3.812322591949671*^9, 3.812322760045232*^9}, {3.8123228568319244`*^9, 
   3.8123229361188717`*^9}, {3.8123229729291887`*^9, 
   3.8123229965977607`*^9}, {3.8123230333744597`*^9, 3.8123230720370317`*^9}, 
   3.8123231197339344`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{{3.8123225925515475`*^9, 3.812322634033271*^9}, {
   3.8123227409089813`*^9, 3.8123227608026805`*^9}, {3.8123228874376073`*^9, 
   3.8123228989698467`*^9}, 3.812322937125657*^9, 3.8123229973720026`*^9, {
   3.8123230345494547`*^9, 3.812323057154601*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BlockadeHamiltonian", "[", "atomNum_", "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"excitedList", "=", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], ",", "n", ",", "HBlockade"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<", "atomNum"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"n", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Flatten", "@", "excitedList"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], "+", "1"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"excitedList", ",", "n"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"oldLength", " ", "=", " ", 
          RowBox[{"Length", "[", "excitedList", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"For", "[", 
          RowBox[{
           RowBox[{"j", "=", "2"}], ",", 
           RowBox[{"j", "<", "oldLength"}], ",", 
           RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{"excitedList", ",", 
              RowBox[{"Flatten", "@", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"excitedList", "[", 
                  RowBox[{"[", "j", "]"}], "]"}], ",", "n"}], "}"}]}]}], 
             "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"dim", " ", "=", " ", 
       RowBox[{"2", "^", "atomNum"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HBlockade", " ", "=", " ", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0", ",", 
         RowBox[{"{", 
          RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"k", "=", "1"}], ",", 
        RowBox[{"k", "<", 
         RowBox[{"dim", "+", "1"}]}], ",", 
        RowBox[{"k", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"atoms", " ", "=", " ", 
          RowBox[{"excitedList", "[", 
           RowBox[{"[", "k", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"HBlockade", "[", 
           RowBox[{"[", 
            RowBox[{"k", ",", "k"}], "]"}], "]"}], "=", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "atoms", "]"}], ">", "0"}], ",", 
            RowBox[{"BlockadeTerm", "[", "atoms", "]"}], ",", "0"}], "]"}]}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "HBlockade"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8123264683969727`*^9, 3.812326486469763*^9}, {
  3.81232662802704*^9, 3.8123266530921464`*^9}, {3.8123266999613953`*^9, 
  3.8123267310142326`*^9}, {3.812326799596867*^9, 3.8123271330565057`*^9}, {
  3.8123273192749453`*^9, 3.812327380069936*^9}, {3.812327428288156*^9, 
  3.812327452385798*^9}, {3.8123275758003473`*^9, 3.8123276323051825`*^9}, {
  3.8123276753093023`*^9, 3.812327752872676*^9}, {3.812327821217046*^9, 
  3.8123278824310064`*^9}, {3.812327927751043*^9, 3.812327967269305*^9}, {
  3.8123280613001533`*^9, 3.8123280732733583`*^9}, {3.8123281531589675`*^9, 
  3.8123282278481*^9}, {3.812328281205476*^9, 3.8123283128899126`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"atoms", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Length", "[", "atoms", "]"}], ">", "0"}], ",", 
   RowBox[{"BlockadeTerm", "[", "atoms", "]"}], ",", "0"}], "]"}]}], "Input",
 CellChangeTimes->{{3.812328025927863*^9, 3.8123280415049505`*^9}}],

Cell[BoxData[
 RowBox[{
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 2],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 3],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"2\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 2, 3],
   Editable->False]}]], "Output",
 CellChangeTimes->{{3.81232803596637*^9, 3.812328042669524*^9}, 
   3.812328085388204*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"H123", "+", 
   RowBox[{"BlockadeHamiltonian", "[", "3", "]"}]}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8123277302738857`*^9, 3.8123277396637263`*^9}, {
  3.812328112843172*^9, 3.8123281644909477`*^9}, {3.8123283160173645`*^9, 
  3.8123283276611032`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0"},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", 
       InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\))\\)]\\)\"\>",
        StringForm[
        "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)", 1, 2],
        Editable->False]}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"]},
     {
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", "\[CapitalDelta]3", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]3", "+", 
       InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
        StringForm[
        "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)", 1, 3],
        Editable->False]}], "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {"0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]3", "+", 
       InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"2\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
        StringForm[
        "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)", 2, 3],
        Editable->False]}], 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3", 
       "+", 
       InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\))\\)]\\)\"\>",
        StringForm[
        "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)", 1, 2],
        Editable->False], "+", 
       InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
        StringForm[
        "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)", 1, 3],
        Editable->False], "+", 
       InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"2\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
        StringForm[
        "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)", 2, 3],
        Editable->False]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8123277574133987`*^9, 3.8123278565249653`*^9, {3.812327957212829*^9, 
   3.8123279746263885`*^9}, 3.81232810303502*^9, {3.812328137612626*^9, 
   3.812328165128434*^9}, {3.812328201422093*^9, 3.812328212114974*^9}, {
   3.8123283028074303`*^9, 3.8123283289541845`*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"listn", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"fakeidx", "=", "1"}], ",", 
   RowBox[{"fakeidx", "<", "4"}], ",", 
   RowBox[{"fakeidx", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"n", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"Flatten", "@", "listn"}], ")"}], "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], "+", "1"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"listn", ",", "n"}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"oldLength", " ", "=", " ", 
     RowBox[{"Length", "[", "listn", "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"For", "[", 
     RowBox[{
      RowBox[{"fakeidx2", "=", "2"}], ",", 
      RowBox[{"fakeidx2", "<", "oldLength"}], ",", 
      RowBox[{"fakeidx2", "++"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"AppendTo", "[", 
        RowBox[{"listn", ",", 
         RowBox[{"Flatten", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"listn", "[", 
             RowBox[{"[", "fakeidx2", "]"}], "]"}], ",", "n"}], "}"}]}]}], 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.8123230743053284`*^9, 3.812323177681433*^9}, {
   3.812323593702451*^9, 3.8123236010834885`*^9}, 3.81232373160015*^9, {
   3.812323792207202*^9, 3.812323938393195*^9}}],

Cell[CellGroupData[{

Cell[BoxData["listn"], "Input",
 CellChangeTimes->{{3.812323161238824*^9, 3.8123231624265947`*^9}, {
  3.812323873250557*^9, 3.8123238739027085`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", "3", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "4", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.812323162694191*^9, 3.8123236060401*^9, 3.812323733782526*^9, {
   3.812323921024435*^9, 3.8123239431083136`*^9}}]
}, Open  ]],

Cell[BoxData["BuildInteraction"], "Input",
 CellChangeTimes->{{3.8123264536335144`*^9, 3.812326457489005*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", " ", "=", " ", 
   RowBox[{"Length", "[", "listn", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Htestint", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"dim", ",", "dim"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"diag", "=", "1"}], ",", 
   RowBox[{"diag", "<", "dim"}], ",", 
   RowBox[{"diag", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Htestint", " ", "=", " ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"listn", "[", "dim", "]"}], "]"}], ">", "0"}], ","}], 
     "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.812324025457887*^9, 3.812324115165765*^9}, {
  3.812324169851132*^9, 3.8123242134619703`*^9}, {3.8123242999780383`*^9, 
  3.8123243679432487`*^9}, {3.8123255278118143`*^9, 3.8123255347647038`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"BlockadeTerm", "[", "atomIdcs_", "]"}], ":=", 
  RowBox[{"Total", "[", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"\[CapitalOmega]BString", "[", 
       RowBox[{
        RowBox[{"atomIdcs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", 
        RowBox[{"atomIdcs", "[", 
         RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "atomIdcs", "]"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", 
        RowBox[{"Range", "[", 
         RowBox[{
          RowBox[{"1", "+", "i"}], ",", 
          RowBox[{"Length", "[", "atomIdcs", "]"}]}], "]"}]}], "}"}]}], 
     "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"\[CapitalOmega]BString", "[", 
    RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
   RowBox[{"StringForm", "[", 
    RowBox[{
    "\"\<\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \
\((``, ``)\)]\)\>\"", ",", "i", ",", "j"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8123244420775013`*^9, 3.8123244854290752`*^9}, {
  3.8123246530247555`*^9, 3.8123246951160493`*^9}, {3.8123247483104024`*^9, 
  3.8123247666461043`*^9}, {3.8123247978205814`*^9, 3.81232492052244*^9}, {
  3.812325545837923*^9, 3.8123255539431095`*^9}, {3.8123255920011773`*^9, 
  3.8123256023608093`*^9}, {3.8123256422457695`*^9, 3.8123256797206335`*^9}, {
  3.812326074225168*^9, 3.8123260852920446`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlockadeTerm", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.812326089880982*^9, 3.812326124633055*^9}}],

Cell[BoxData[
 RowBox[{
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 2],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 3],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"4\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 4],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"2\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 2, 3],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"2\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"4\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 2, 4],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"3\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"4\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 3, 4],
   Editable->False]}]], "Output",
 CellChangeTimes->{3.812326127974825*^9, 3.812326178233185*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"alist", "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"Flatten", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[CapitalOmega]BString", "[", 
      RowBox[{
       RowBox[{"alist", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", 
       RowBox[{"alist", "[", 
        RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Range", "[", 
        RowBox[{"Length", "[", "alist", "]"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", 
       RowBox[{"Range", "[", 
        RowBox[{
         RowBox[{"1", "+", "i"}], ",", 
         RowBox[{"Length", "[", "alist", "]"}]}], "]"}]}], "}"}]}], "]"}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8123245013140383`*^9, 3.812324516171531*^9}, {
  3.8123245595477123`*^9, 3.812324562037495*^9}, {3.812324938135827*^9, 
  3.8123250233236294`*^9}, {3.812325157709733*^9, 3.8123251710928555`*^9}, {
  3.812325204803276*^9, 3.8123252531601467`*^9}, {3.8123253415751767`*^9, 
  3.8123253430505066`*^9}}],

Cell[BoxData[
 RowBox[{
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"2\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 2],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 3],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"1\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"4\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 1, 4],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"2\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"3\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 2, 3],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"2\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"4\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 2, 4],
   Editable->False], "+", 
  InterpretationBox["\<\"\\!\\(\\*SuperscriptBox[SubscriptBox[\\(\
\[CapitalOmega]\\), \\(B\\)], \\((\\!\\(\\*RowBox[{\\\"3\\\"}]\\), \
\\!\\(\\*RowBox[{\\\"4\\\"}]\\))\\)]\\)\"\>",
   StringForm[
   "\!\(\*SuperscriptBox[SubscriptBox[\(\[CapitalOmega]\), \(B\)], \((``, ``)\
\)]\)", 3, 4],
   Editable->False]}]], "Output",
 CellChangeTimes->{
  3.81232517323315*^9, {3.81232520886644*^9, 3.8123252233480062`*^9}, 
   3.812325343686083*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlockadeTerm", "[", "]"}]], "Input",
 CellChangeTimes->{{3.812325272877943*^9, 3.812325302530513*^9}, {
  3.8123264236150217`*^9, 3.8123264325650663`*^9}}],

Cell[BoxData["add"], "Output",
 CellChangeTimes->{3.8123252756495037`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.8123243345376267`*^9, 3.8123243367921886`*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.812324337129854*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", "3"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", 
     RowBox[{"Range", "[", "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8123250591011763`*^9, 3.812325078570385*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "@", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "2", ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8123237604790173`*^9, 3.812323767020362*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1", ",", "2", ",", "1", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.812323767554134*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"H4", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]4", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]4", "/", "2"}], "\[CapitalDelta]4"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H1234", "=", 
   RowBox[{
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H1", "]"}], "]"}], ",", "H123"}], "]"}], " ", 
    "+", " ", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"H4", ",", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H123", "]"}], "]"}]}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8121463079667563`*^9, 3.812146379076687*^9}, 
   3.8121466333805685`*^9, {3.8121467026937094`*^9, 3.8121467048471813`*^9}, {
   3.8121468278439665`*^9, 3.8121468330883055`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"H1234", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8121468446856875`*^9, 3.8121468489387026`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]2"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", "\[CapitalDelta]3", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]3"}], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]3"}], 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3"}], 
      "0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"]},
     {
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0", "0",
       "\[CapitalDelta]4", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]4"}], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]4"}], 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]4"}], 
      "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"]},
     {"0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      RowBox[{"\[CapitalDelta]3", "+", "\[CapitalDelta]4"}], 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {"0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]3", "+", "\[CapitalDelta]4"}], 
      "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {"0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{
      "\[CapitalDelta]2", "+", "\[CapitalDelta]3", "+", "\[CapitalDelta]4"}], 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3", 
       "+", "\[CapitalDelta]4"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8121468492869024`*^9, 3.8123214593628035`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"H5", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]5", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]5", "/", "2"}], "\[CapitalDelta]5"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H12345", "=", 
   RowBox[{
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H1", "]"}], "]"}], ",", "H1234"}], "]"}], " ", 
    "+", " ", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"H5", ",", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H1234", "]"}], "]"}]}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8123214889484434`*^9, 3.8123215153225193`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"H12345", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"17", ";;"}], ",", 
     RowBox[{"17", ";;"}]}], "]"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8123214914056787`*^9, 3.8123215761708813`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\[CapitalDelta]5", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]5"}], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]5"}], 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]5"}], 
      "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      RowBox[{"\[CapitalDelta]3", "+", "\[CapitalDelta]5"}], 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]3", "+", "\[CapitalDelta]5"}], 
      "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{
      "\[CapitalDelta]2", "+", "\[CapitalDelta]3", "+", "\[CapitalDelta]5"}], 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3", 
       "+", "\[CapitalDelta]5"}], "0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"]},
     {
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0", "0", 
      RowBox[{"\[CapitalDelta]4", "+", "\[CapitalDelta]5"}], 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]4", "+", "\[CapitalDelta]5"}], 
      "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{
      "\[CapitalDelta]2", "+", "\[CapitalDelta]4", "+", "\[CapitalDelta]5"}], 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]4", 
       "+", "\[CapitalDelta]5"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"]},
     {"0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", 
      RowBox[{
      "\[CapitalDelta]3", "+", "\[CapitalDelta]4", "+", "\[CapitalDelta]5"}], 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {"0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]3", "+", "\[CapitalDelta]4", 
       "+", "\[CapitalDelta]5"}], "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {"0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{
      "\[CapitalDelta]2", "+", "\[CapitalDelta]3", "+", "\[CapitalDelta]4", 
       "+", "\[CapitalDelta]5"}], 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]4", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3", 
       "+", "\[CapitalDelta]4", "+", "\[CapitalDelta]5"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812321546714106*^9, 3.812321576537182*^9}}]
}, Open  ]],

Cell["\<\
Try to add in the blockade interaction in a straightforward way:\
\>", "Text",
 CellChangeTimes->{{3.8121514481256084`*^9, 3.812151461554949*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Clear", "[", "\[CapitalOmega]B", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H1", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]1", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]1", "/", "2"}], "\[CapitalDelta]1"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H2", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]2", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]2", "/", "2"}], "\[CapitalDelta]2"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H12int", " ", "=", " ", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"H12int", "[", 
     RowBox[{"[", 
      RowBox[{"4", ",", "4"}], "]"}], "]"}], "=", "\[CapitalOmega]B12"}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H12", " ", "=", 
   RowBox[{
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H2", "]"}], "]"}], ",", "H1"}], "]"}], " ", 
    "+", " ", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"H2", ",", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H1", "]"}], "]"}]}], "]"}], "+", "H12int"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.8121514972149134`*^9, 3.8121516284568872`*^9}, {
  3.81215191139727*^9, 3.8121519114744105`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalOmega]B12"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8121516270237837`*^9, 3.8121516298097043`*^9}, 
   3.812151912135333*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"H3", "=", 
   RowBox[{"(", GridBox[{
      {"0", 
       RowBox[{"\[CapitalOmega]3", "/", "2"}]},
      {
       RowBox[{"\[CapitalOmega]3", "/", "2"}], "\[CapitalDelta]3"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H13", " ", "=", 
   RowBox[{
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H3", "]"}], "]"}], ",", "H12"}], "]"}], " ", 
    "+", " ", 
    RowBox[{"KroneckerProduct", "[", 
     RowBox[{"H3", ",", 
      RowBox[{"IdentityMatrix", "[", 
       RowBox[{"Length", "[", "H12", "]"}], "]"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.8121518461234446`*^9, 3.8121519779918094`*^9}, {
  3.8121529688985662`*^9, 3.812153081747897*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]1", "2"], "\[CapitalDelta]1", "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0"},
     {
      FractionBox["\[CapitalOmega]2", "2"], "0", "\[CapitalDelta]2", 
      FractionBox["\[CapitalOmega]1", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", 
       "\[CapitalOmega]B12"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"]},
     {
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", "0", "\[CapitalDelta]3", 
      FractionBox["\[CapitalOmega]1", "2"], 
      FractionBox["\[CapitalOmega]2", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]3"}], "0", 
      FractionBox["\[CapitalOmega]2", "2"]},
     {"0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], "0", 
      RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]3"}], 
      FractionBox["\[CapitalOmega]1", "2"]},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]3", "2"], "0", 
      FractionBox["\[CapitalOmega]2", "2"], 
      FractionBox["\[CapitalOmega]1", "2"], 
      RowBox[{
      "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3", 
       "+", "\[CapitalOmega]B12"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8121530363353367`*^9, 3.8121530822925987`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8121529826490245`*^9, 3.812152982925845*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"H13int", " ", "=", " ", 
   RowBox[{"H12int", " ", "=", " ", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"H13int", "[", 
     RowBox[{"[", 
      RowBox[{"4", ",", "4"}], "]"}], "]"}], "=", "\[CapitalOmega]B13"}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"H23int", " ", "=", " ", 
   RowBox[{"H12int", " ", "=", " ", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"H23int", "[", 
     RowBox[{"[", 
      RowBox[{"4", ",", "4"}], "]"}], "]"}], "=", "\[CapitalOmega]B23"}], 
   ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"H12", " ", "=", 
     RowBox[{
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "H2", "]"}], "]"}], ",", "H1"}], "]"}], " ", 
      "+", " ", 
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{"H2", ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "H1", "]"}], "]"}]}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"%", "//", "MatrixForm"}]}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8121518461234446`*^9, 3.8121519779918094`*^9}, {
  3.8121529688985662`*^9, 3.812152977407816*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"KroneckerProduct", "[", 
   RowBox[{
    RowBox[{"IdentityMatrix", "[", 
     RowBox[{"Length", "[", "H3", "]"}], "]"}], ",", "H13int"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",
 CellChangeTimes->{
  3.8121529529914804`*^9, {3.8121530883857203`*^9, 3.8121532202308273`*^9}, {
   3.8121532669800463`*^9, 3.81215330485398*^9}, {3.8121533442664013`*^9, 
   3.8121533909222507`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "\[CapitalOmega]B13", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "0"},
     {"0", "0", "0", "0", "0", "0", "0", "\[CapitalOmega]B13"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812153125465613*^9, 3.812153170815939*^9}, 
   3.8121532208276863`*^9, {3.8121532683662415`*^9, 3.812153305420763*^9}, {
   3.8121533616682944`*^9, 3.812153391361569*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["H3"], "Input",
 CellChangeTimes->{{3.812153240489125*^9, 3.8121532545206966`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["\[CapitalOmega]3", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[CapitalOmega]3", "2"], ",", "\[CapitalDelta]3"}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{{3.812153244026168*^9, 3.812153255315741*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["H13"], "Input",
 CellChangeTimes->{{3.8121531750328255`*^9, 3.8121531763697004`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["\[CapitalOmega]1", "2"], ",", 
     FractionBox["\[CapitalOmega]2", "2"], ",", "0", ",", 
     FractionBox["\[CapitalOmega]3", "2"], ",", "0", ",", "0", ",", "0"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[CapitalOmega]1", "2"], ",", "\[CapitalDelta]1", ",", "0", 
     ",", 
     FractionBox["\[CapitalOmega]2", "2"], ",", "0", ",", 
     FractionBox["\[CapitalOmega]3", "2"], ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[CapitalOmega]2", "2"], ",", "0", ",", "\[CapitalDelta]2", 
     ",", 
     FractionBox["\[CapitalOmega]1", "2"], ",", "0", ",", "0", ",", 
     FractionBox["\[CapitalOmega]3", "2"], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["\[CapitalOmega]2", "2"], ",", 
     FractionBox["\[CapitalOmega]1", "2"], ",", 
     RowBox[{
     "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalOmega]B12"}],
      ",", "0", ",", "0", ",", "0", ",", 
     FractionBox["\[CapitalOmega]3", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["\[CapitalOmega]3", "2"], ",", "0", ",", "0", ",", "0", ",", 
     "\[CapitalDelta]3", ",", 
     FractionBox["\[CapitalOmega]1", "2"], ",", 
     FractionBox["\[CapitalOmega]2", "2"], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     FractionBox["\[CapitalOmega]3", "2"], ",", "0", ",", "0", ",", 
     FractionBox["\[CapitalOmega]1", "2"], ",", 
     RowBox[{"\[CapitalDelta]1", "+", "\[CapitalDelta]3"}], ",", "0", ",", 
     FractionBox["\[CapitalOmega]2", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", 
     FractionBox["\[CapitalOmega]3", "2"], ",", "0", ",", 
     FractionBox["\[CapitalOmega]2", "2"], ",", "0", ",", 
     RowBox[{"\[CapitalDelta]2", "+", "\[CapitalDelta]3"}], ",", 
     FractionBox["\[CapitalOmega]1", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", 
     FractionBox["\[CapitalOmega]3", "2"], ",", "0", ",", 
     FractionBox["\[CapitalOmega]2", "2"], ",", 
     FractionBox["\[CapitalOmega]1", "2"], ",", 
     RowBox[{
     "\[CapitalDelta]1", "+", "\[CapitalDelta]2", "+", "\[CapitalDelta]3", 
      "+", "\[CapitalOmega]B12"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8121531766056175`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"KroneckerDelta", "[", 
  RowBox[{"H12int", ",", 
   RowBox[{"IdentityMatrix", "[", "4", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8121519666010447`*^9, 3.8121520036902666`*^9}, 
   3.8121520546168733`*^9}],

Cell[BoxData["H13int"], "Input",
 CellChangeTimes->{{3.812151887187044*^9, 3.812151890448577*^9}}],

Cell[CellGroupData[{

Cell[BoxData["\[CapitalOmega]B"], "Input",
 CellChangeTimes->{{3.8121516001584435`*^9, 3.812151603276168*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.8121515708611655`*^9, 3.8121516035851164`*^9}}]
}, Open  ]],

Cell[TextData[{
 "If we know what the basis is than we will know how to properly build the \
interaction Hamiltonian. \n{",
 Cell[BoxData[
  RowBox[{
   TemplateBox[{"1000"},
    "Ket"], ",", 
   TemplateBox[{"0100"},
    "Ket"], ",", 
   TemplateBox[{"1100"},
    "Ket"], ",", 
   TemplateBox[{"0010"},
    "Ket"], ",", 
   TemplateBox[{"1010"},
    "Ket"]}]]],
 "}... etc. So writing the states this way, denoting the jth atom in the \
subspace in its excited (ground) state with a 1 (0) in the jth position of \
the 4-atom ket, shows that the atoms involved in the blockade are gotten by \
looking at the non-zero places in the binary representation of the diagonal \
index. This pattern will change for a more complicated atom but this is a \
good start. "
}], "Text",
 CellChangeTimes->{{3.812147090118265*^9, 3.8121473307167487`*^9}, {
   3.812147375247294*^9, 3.812147398746379*^9}, 3.8121477774559727`*^9, {
   3.8121480465140676`*^9, 3.812148141341235*^9}, {3.8121514408945074`*^9, 
   3.812151442186186*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8121514435896087`*^9, 3.8121514443476734`*^9}}],

Cell["\<\
Now construct such a hamiltonian for an arbitrary number of quantum systems \
using a function \
\>", "Text",
 CellChangeTimes->{{3.812148154558693*^9, 3.8121482020036907`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"HamiltonianProduct", "[", 
     RowBox[{"hsingle_", ",", "volume_"}], " ", "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"totalham", "=", "hsingle"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "the", " ", "Hamiltonian", " ", "describing", " ", "the", " ", 
        "combined", " ", "space", " ", "of", " ", "`volume`", " ", "number", 
        " ", "of", " ", "quantum", " ", "systems", " ", "with", " ", 
        "individual", " ", "Hamiltonian", " ", "hsingle"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", "1"}], ",", 
         RowBox[{"i", "<", "volume"}], ",", 
         RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"totalham", " ", "=", " ", 
           RowBox[{
            RowBox[{"KroneckerProduct", "[", 
             RowBox[{
              RowBox[{"IdentityMatrix", "[", 
               RowBox[{"Length", "[", "ham", "]"}], "]"}], ",", "totalham"}], 
             "]"}], " ", "+", " ", 
            RowBox[{"KroneckerProduct", "[", 
             RowBox[{"ham", ",", 
              RowBox[{"IdentityMatrix", "[", 
               RowBox[{"Length", "[", "totalham", "]"}], "]"}]}], "]"}]}]}], 
          ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "totalham"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8121488170657635`*^9, 3.8121489934165783`*^9}, {
  3.812149032438018*^9, 3.8121490329108553`*^9}, {3.8121490744404006`*^9, 
  3.812149160341043*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"HamiltonianProduct", "[", 
   RowBox[{"Hsingle", ",", "4"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.8121489752465973`*^9, 3.8121490006972733`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "\[CapitalDelta]", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", "0", "0", "0", "0", "0", 
      "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", "0", 
      "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"3", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"4", " ", "\[CapitalDelta]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.812148986386901*^9, 3.812149001051944*^9}, 
   3.8121490345816784`*^9, 3.8121491569384766`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ham", " ", "=", " ", "Hsingle"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"volume", "=", "4"}], ";"}], " ", 
  RowBox[{"(*", 
   RowBox[{"number", " ", "of", " ", "quantum", " ", "system"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"totalham", " ", "=", " ", "Hsingle"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "1"}], ",", 
   RowBox[{"i", "<", "volume"}], ",", 
   RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"totalham", " ", "=", " ", 
     RowBox[{
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "ham", "]"}], "]"}], ",", "totalham"}], "]"}],
       " ", "+", " ", 
      RowBox[{"KroneckerProduct", "[", 
       RowBox[{"ham", ",", 
        RowBox[{"IdentityMatrix", "[", 
         RowBox[{"Length", "[", "totalham", "]"}], "]"}]}], "]"}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"totalham", "//", "MatrixForm"}], "]"}]}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellChangeTimes->{{3.812148273709047*^9, 3.8121482892793646`*^9}, {
  3.812148328658717*^9, 3.8121485023981943`*^9}, {3.8121485677046647`*^9, 
  3.8121485799721756`*^9}, {3.8121486665861635`*^9, 3.812148762157323*^9}, {
  3.812149054782303*^9, 3.812149054966093*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "\[CapitalDelta]", "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Print",
 CellChangeTimes->{
  3.8121485812605247`*^9, {3.812148691191137*^9, 3.8121486977083244`*^9}, 
   3.812148729730687*^9, 3.812148762830231*^9, 3.812149055492099*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "\[CapitalDelta]", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Print",
 CellChangeTimes->{
  3.8121485812605247`*^9, {3.812148691191137*^9, 3.8121486977083244`*^9}, 
   3.812148729730687*^9, 3.812148762830231*^9, 3.8121490555091248`*^9}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "\[CapitalDelta]", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0"},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", "0", "0", "0", "0", "0", 
      "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", "0", 
      "\[CapitalDelta]", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0"},
     {"0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"2", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0"},
     {"0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      RowBox[{"2", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], "0"},
     {"0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"3", " ", "\[CapitalDelta]"}], "0", 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      RowBox[{"3", " ", "\[CapitalDelta]"}], 
      FractionBox["\[CapitalOmega]", "2"]},
     {"0", "0", "0", "0", "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", "0", "0", 
      FractionBox["\[CapitalOmega]", "2"], "0", 
      FractionBox["\[CapitalOmega]", "2"], 
      FractionBox["\[CapitalOmega]", "2"], 
      RowBox[{"4", " ", "\[CapitalDelta]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Print",
 CellChangeTimes->{
  3.8121485812605247`*^9, {3.812148691191137*^9, 3.8121486977083244`*^9}, 
   3.812148729730687*^9, 3.812148762830231*^9, 3.812149055540115*^9}]
}, Closed]]
}, Open  ]],

Cell["Generate the multi-atom blockade interaction matrix", "Text",
 CellChangeTimes->{{3.8121494508508344`*^9, 3.812149466632848*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"OmegaB", "[", 
    RowBox[{"i_", ",", "j_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"KroneckerDelta", "[", 
     RowBox[{"i", ",", "j"}], "]"}], 
    RowBox[{"StringForm", "[", 
     RowBox[{"\"\<\[CapitalOmega]B````\>\"", ",", "i", ",", "j"}], "]"}]}]}], 
  ";", " ", 
  RowBox[{"(*", 
   RowBox[{
   "eventually", " ", "this", " ", "will", " ", "be", " ", "a", " ", 
    "realistic", " ", "function"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8121494950870056`*^9, 3.812149579049961*^9}, {
  3.8121507385344434`*^9, 3.812150741176757*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Bidcs", "=", 
  RowBox[{"Table", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.8121507184701695`*^9, 3.8121507817859373`*^9}}],

Cell[BoxData[
 InterpretationBox["\<\"\[CapitalOmega]B\\!\\(\\*RowBox[{\\\"1\\\"}]\\)\\!\\(\
\\*RowBox[{\\\"3\\\"}]\\)\"\>",
  StringForm["\[CapitalOmega]B````", 1, 3],
  Editable->False]], "Output",
 CellChangeTimes->{3.8121507291161947`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1536, 821},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 113, 1, 101, "Title"],
Cell[696, 25, 91, 1, 30, "Text"],
Cell[790, 28, 238, 5, 30, "Input"],
Cell[CellGroupData[{
Cell[1053, 37, 102, 1, 70, "Section"],
Cell[1158, 40, 9197, 225, 864, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10392, 270, 206, 3, 70, "Section"],
Cell[CellGroupData[{
Cell[10623, 277, 97, 1, 49, "Subsection"],
Cell[10723, 280, 332, 6, 30, "Text"],
Cell[11058, 288, 316, 6, 30, "Text"],
Cell[11377, 296, 3733, 99, 112, "Text"],
Cell[15113, 397, 879, 18, 108, "Input"],
Cell[15995, 417, 176, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[16196, 425, 1192, 32, 123, "Input"],
Cell[17391, 459, 1280, 31, 128, "Output"]
}, Open  ]],
Cell[18686, 493, 102, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[18813, 498, 839, 22, 86, "Input"],
Cell[19655, 522, 2310, 54, 244, "Output"]
}, Open  ]],
Cell[21980, 579, 881, 28, 80, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22898, 612, 174, 2, 49, "Subsection"],
Cell[23075, 616, 2356, 61, 200, "Input"],
Cell[CellGroupData[{
Cell[25456, 681, 1115, 24, 69, "Input"],
Cell[26574, 707, 1125, 26, 94, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27736, 738, 5503, 139, 392, "Input"],
Cell[33242, 879, 570, 10, 22, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33849, 894, 3078, 80, 156, "Input"],
Cell[36930, 976, 97685, 1674, 314, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[134652, 2655, 2801, 67, 103, "Input"],
Cell[137456, 2724, 128852, 2199, 269, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[266357, 4929, 142, 1, 49, "Subsection"],
Cell[266502, 4932, 1512, 44, 181, "Input"],
Cell[CellGroupData[{
Cell[268039, 4980, 1419, 36, 107, "Input"],
Cell[269461, 5018, 5026, 109, 460, "Output"]
}, Open  ]],
Cell[274502, 5130, 3723, 108, 297, "Input"],
Cell[278228, 5240, 1900, 49, 83, "Input"],
Cell[280131, 5291, 16, 0, 30, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[280196, 5297, 112, 1, 70, "Section"],
Cell[280311, 5300, 691, 16, 90, "Text"],
Cell[CellGroupData[{
Cell[281027, 5320, 1416, 38, 185, "Input"],
Cell[282446, 5360, 3752, 76, 428, "Output"]
}, Open  ]],
Cell[286213, 5439, 155, 2, 30, "Text"],
Cell[286371, 5443, 1432, 35, 146, "Input"],
Cell[CellGroupData[{
Cell[287828, 5482, 854, 20, 69, "Input"],
Cell[288685, 5504, 178, 4, 22, "Print"],
Cell[288866, 5510, 126, 2, 30, "Output"]
}, Open  ]],
Cell[289007, 5515, 165, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[289197, 5522, 519, 12, 30, "Input"],
Cell[289719, 5536, 150, 3, 30, "Output"]
}, Open  ]],
Cell[289884, 5542, 1033, 27, 69, "Input"],
Cell[290920, 5571, 126, 2, 30, "Input"],
Cell[291049, 5575, 223, 5, 30, "Text"],
Cell[291275, 5582, 285, 7, 30, "Input"],
Cell[CellGroupData[{
Cell[291585, 5593, 211, 4, 30, "Input"],
Cell[291799, 5599, 971, 27, 34, "Output"]
}, Open  ]],
Cell[292785, 5629, 278, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[293088, 5638, 1339, 39, 145, "Input"],
Cell[294430, 5679, 1424, 44, 30, "Output"]
}, Open  ]],
Cell[295869, 5726, 115, 1, 50, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296021, 5732, 101, 1, 70, "Section"],
Cell[296125, 5735, 307, 6, 30, "Text"],
Cell[296435, 5743, 1666, 49, 181, "Input"],
Cell[298104, 5794, 86, 1, 30, "Text"],
Cell[298193, 5797, 176, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[298394, 5805, 1376, 36, 123, "Input"],
Cell[299773, 5843, 1430, 33, 142, "Output"]
}, Open  ]],
Cell[301218, 5879, 104, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[301347, 5884, 882, 24, 88, "Input"],
Cell[302232, 5910, 1259, 31, 142, "Output"]
}, Open  ]],
Cell[303506, 5944, 102, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[303633, 5949, 1141, 28, 105, "Input"],
Cell[304777, 5979, 2478, 56, 258, "Output"]
}, Open  ]],
Cell[307270, 6038, 1007, 23, 69, "Input"],
Cell[308280, 6063, 684, 13, 106, "Text"],
Cell[CellGroupData[{
Cell[308989, 6080, 1269, 36, 88, "Input"],
Cell[310261, 6118, 357, 6, 30, "Output"]
}, Open  ]],
Cell[310633, 6127, 3706, 86, 373, "Input"],
Cell[CellGroupData[{
Cell[314364, 6217, 406, 10, 50, "Input"],
Cell[314773, 6229, 1075, 24, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315885, 6258, 309, 7, 30, "Input"],
Cell[316197, 6267, 4522, 100, 258, "Output"]
}, Open  ]],
Cell[320734, 6370, 1544, 40, 183, "Input"],
Cell[CellGroupData[{
Cell[322303, 6414, 150, 2, 30, "Input"],
Cell[322456, 6418, 951, 27, 30, "Output"]
}, Open  ]],
Cell[323422, 6448, 110, 1, 30, "Input"],
Cell[323535, 6451, 979, 25, 107, "Input"],
Cell[324517, 6478, 1541, 37, 55, "Input"],
Cell[CellGroupData[{
Cell[326083, 6519, 198, 4, 30, "Input"],
Cell[326284, 6525, 2002, 44, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[328323, 6574, 1163, 31, 50, "Input"],
Cell[329489, 6607, 2055, 46, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331581, 6658, 179, 3, 30, "Input"],
Cell[331763, 6663, 74, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331874, 6669, 129, 2, 30, "Input"],
Cell[332006, 6673, 70, 1, 30, "Output"]
}, Open  ]],
Cell[332091, 6677, 398, 12, 30, "Input"],
Cell[CellGroupData[{
Cell[332514, 6693, 268, 7, 30, "Input"],
Cell[332785, 6702, 145, 3, 30, "Output"]
}, Open  ]],
Cell[332945, 6708, 874, 24, 67, "Input"],
Cell[CellGroupData[{
Cell[333844, 6736, 133, 2, 30, "Input"],
Cell[333980, 6740, 5479, 117, 490, "Output"]
}, Open  ]],
Cell[339474, 6860, 747, 22, 67, "Input"],
Cell[CellGroupData[{
Cell[340246, 6886, 257, 7, 30, "Input"],
Cell[340506, 6895, 6002, 130, 490, "Output"]
}, Open  ]],
Cell[346523, 7028, 156, 3, 30, "Text"],
Cell[CellGroupData[{
Cell[346704, 7035, 1604, 48, 180, "Input"],
Cell[348311, 7085, 1196, 31, 128, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[349544, 7121, 856, 24, 86, "Input"],
Cell[350403, 7147, 2339, 56, 244, "Output"]
}, Open  ]],
Cell[352757, 7206, 94, 1, 30, "Input"],
Cell[352854, 7209, 1565, 48, 126, "Input"],
Cell[CellGroupData[{
Cell[354444, 7261, 463, 11, 50, "Input"],
Cell[354910, 7274, 1155, 26, 148, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356102, 7305, 96, 1, 30, "Input"],
Cell[356201, 7308, 333, 10, 53, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356571, 7323, 99, 1, 30, "Input"],
Cell[356673, 7326, 2381, 55, 98, "Output"]
}, Open  ]],
Cell[359069, 7384, 235, 5, 30, "Input"],
Cell[359307, 7391, 98, 1, 30, "Input"],
Cell[CellGroupData[{
Cell[359430, 7396, 110, 1, 30, "Input"],
Cell[359543, 7399, 98, 1, 30, "Output"]
}, Open  ]],
Cell[359656, 7403, 1018, 25, 75, "Text"],
Cell[360677, 7430, 96, 1, 30, "Input"],
Cell[360776, 7433, 187, 4, 30, "Text"],
Cell[360966, 7439, 1747, 41, 183, "Input"],
Cell[CellGroupData[{
Cell[362738, 7484, 204, 4, 30, "Input"],
Cell[362945, 7490, 5078, 110, 460, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[368060, 7605, 1415, 36, 145, "Input"],
Cell[CellGroupData[{
Cell[369500, 7645, 1204, 31, 117, "Print"],
Cell[370707, 7678, 2235, 54, 229, "Print"],
Cell[372945, 7734, 5124, 111, 453, "Print"]
}, Closed]]
}, Open  ]],
Cell[378096, 7849, 135, 1, 30, "Text"],
Cell[378234, 7852, 590, 16, 30, "Input"],
Cell[CellGroupData[{
Cell[378849, 7872, 150, 3, 30, "Input"],
Cell[379002, 7877, 243, 5, 30, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

