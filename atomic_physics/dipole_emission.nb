(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     77145,       1569]
NotebookOptionsPosition[     75746,       1517]
NotebookOutlinePosition[     76108,       1533]
CellTagsIndexPosition[     76065,       1530]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["emission from a dipole", "Title",
 CellChangeTimes->{{3.8355621425786457`*^9, 3.8355621518727674`*^9}}],

Cell[BoxData[{
 RowBox[{"Clear", "[", "k", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"conj", "[", "z_", "]"}], ":=", 
    RowBox[{"z", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[ImaginaryI]", "\[Rule]", " ", 
        RowBox[{"-", "\[ImaginaryI]"}]}], ",", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], "\[Rule]", "\[ImaginaryI]"}]}], 
      "}"}]}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Green", "'"}], "s", " ", "tensor", " ", "for", " ", "dipole", 
    " ", "emission", " ", "along", " ", "r", " ", "hat", " ", "dotted", " ", 
    "with", " ", "polarization", " ", "vector", " ", "p", " ", "hat"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GdotP", "[", 
    RowBox[{"r_", ",", "p_"}], "]"}], ":=", 
   RowBox[{
    FractionBox[
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"\[ImaginaryI]", " ", "k", " ", 
       SqrtBox[
        RowBox[{"r", ".", "r"}]]}]], 
     RowBox[{"4", " ", "\[Pi]", " ", 
      SqrtBox[
       RowBox[{"r", ".", "r"}]]}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Cross", "[", 
       RowBox[{
        RowBox[{"Cross", "[", 
         RowBox[{
          RowBox[{"unit", "[", "r", "]"}], ",", "p"}], "]"}], ",", 
        RowBox[{"unit", "[", "r", "]"}]}], "]"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox["1", 
          RowBox[{
           SuperscriptBox["k", "2"], 
           RowBox[{"r", ".", "r"}]}]], "-", 
         FractionBox["\[ImaginaryI]", 
          RowBox[{"k", " ", 
           SqrtBox[
            RowBox[{"r", ".", "r"}]]}]]}], ")"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"3", 
          RowBox[{"unit", "[", "r", "]"}], " ", 
          RowBox[{"Dot", "[", 
           RowBox[{
            RowBox[{"unit", "[", "r", "]"}], ",", "p"}], "]"}]}], "-", "p"}], 
        ")"}]}]}], ")"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.835562379332008*^9, 3.8355623850151477`*^9}, {
   3.835562713263343*^9, 3.835562742520709*^9}, {3.835562909199416*^9, 
   3.8355629110404696`*^9}, 3.8355629587403293`*^9, 3.8355630364831095`*^9, {
   3.8355649521221094`*^9, 3.8355650053495684`*^9}, {3.8355680056492205`*^9, 
   3.835568014946456*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pz", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8355621796592445`*^9, 3.83556228133827*^9}, {
  3.8355623198318*^9, 3.835562363157098*^9}}],

Cell[BoxData[
 RowBox[{"Dot", "[", 
  RowBox[{
   RowBox[{"GdotP", "[", 
    RowBox[{"r", ",", "pz"}], "]"}], ",", 
   RowBox[{"conj", "[", 
    RowBox[{"GdotP", "[", 
     RowBox[{"r", ",", "pz"}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8355623666676073`*^9, 3.8355623885809555`*^9}, {
  3.8355626971725893`*^9, 3.8355626994306197`*^9}, {3.835563043394212*^9, 
  3.83556307099236*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", 
        SuperscriptBox["k", "2"]], "-", 
       FractionBox["\[ImaginaryI]", "k"]}], ")"}], "2"], " ", 
    SuperscriptBox[
     RowBox[{"Cos", "[", "\[Theta]", "]"}], "2"]}], 
   RowBox[{"4", " ", 
    SuperscriptBox["\[Pi]", "2"]}]], "+", 
  FractionBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         FractionBox["1", 
          SuperscriptBox["k", "2"]], "-", 
         FractionBox["\[ImaginaryI]", "k"]}], ")"}], " ", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}]}]}], ")"}], "2"], 
   RowBox[{"16", " ", 
    SuperscriptBox["\[Pi]", "2"]}]]}]], "Input",
 CellChangeTimes->{{3.8355631398681774`*^9, 3.8355631428506937`*^9}, {
  3.8355632400837584`*^9, 3.835563247955395*^9}}],

Cell[CellGroupData[{

Cell["photon states", "Section",
 CellChangeTimes->{{3.835565024117181*^9, 3.835565026341423*^9}}],

Cell["spherical basis r, \[Theta], \[Phi]. From Stephenson thesis:", "Text",
 CellChangeTimes->{{3.835565039527466*^9, 3.835565092251408*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pi", " ", "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"-", 
      RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", "0"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"rh", " ", "=", 
   RowBox[{
    FractionBox[
     RowBox[{" ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]]}], 
     SqrtBox["2"]], 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", "\[ImaginaryI]"}], 
     "}"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lh", " ", "=", " ", 
   RowBox[{
    FractionBox[
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Phi]"}]], 
     SqrtBox["2"]], 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
      RowBox[{"-", "\[ImaginaryI]"}]}], "}"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8355650316525145`*^9, 3.835565175123907*^9}, {
   3.835566045503956*^9, 3.835566069383774*^9}, {3.8355661564223166`*^9, 
   3.8355661616042905`*^9}, {3.835566861475*^9, 3.8355668655890646`*^9}, {
   3.8355669050096703`*^9, 3.835566925332436*^9}, {3.8355669897686844`*^9, 
   3.835566991010197*^9}, {3.8355683605088215`*^9, 3.8355683713981476`*^9}, 
   3.835568410661147*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", ".", "#"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"pi", ",", "rh", ",", "lh"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8355651804080844`*^9, 3.8355652262017527`*^9}, {
  3.8355652903307867`*^9, 3.835565295847731*^9}, {3.835566088457249*^9, 
  3.8355660901391554`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Phi]"}]]}], "+", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
     SuperscriptBox[
      RowBox[{"Cos", "[", "\[Theta]", "]"}], "2"]}]}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "\[Phi]"}]]}], "+", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
     SuperscriptBox[
      RowBox[{"Cos", "[", "\[Theta]", "]"}], "2"]}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8355652271292505`*^9, 3.8355653003381777`*^9, {3.8355660724337597`*^9, 
   3.8355660909066668`*^9}, 3.835566163526251*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"0", ",", "\[ImaginaryI]"}], "}"}], ".", 
  RowBox[{"conj", "[", 
   RowBox[{"{", 
    RowBox[{"0", ",", "\[ImaginaryI]"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.835567514546342*^9, 3.8355675387264047`*^9}}],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.8355675291535597`*^9, 3.8355675392360287`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["lh"], "Input",
 CellChangeTimes->{{3.8355678839940233`*^9, 3.835567884053832*^9}, {
  3.8355680367013273`*^9, 3.835568036848507*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Phi]"}]], " ", 
     RowBox[{"Cos", "[", "\[Theta]", "]"}]}], 
    SqrtBox["2"]], ",", 
   RowBox[{"-", 
    FractionBox[
     RowBox[{"\[ImaginaryI]", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Phi]"}]]}], 
     SqrtBox["2"]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.835567884812252*^9, 3.835568037343524*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"conj", "[", "lh", "]"}]], "Input",
 CellChangeTimes->{{3.8355675835026517`*^9, 3.8355676771737304`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
     RowBox[{"Cos", "[", "\[Theta]", "]"}]}], 
    SqrtBox["2"]], ",", 
   FractionBox[
    RowBox[{"\[ImaginaryI]", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]]}], 
    SqrtBox["2"]]}], "}"}]], "Output",
 CellChangeTimes->{{3.8355675862899694`*^9, 3.8355676342768016`*^9}, {
   3.835567668925227*^9, 3.8355676917844963`*^9}, 3.8355680385488024`*^9}]
}, Open  ]],

Cell["\<\
Verify that the three states give equal contribution of polarization\
\>", "Text",
 CellChangeTimes->{{3.8355681675750117`*^9, 3.8355681929148006`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", ".", 
        RowBox[{"conj", "[", "#", "]"}]}], " ", 
       RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\[Phi]", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"pi", ",", "lh", ",", "rh"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.835565377957155*^9, 3.8355654400302505`*^9}, {
  3.8355661491184607`*^9, 3.8355661514841623`*^9}, {3.8355662289352703`*^9, 
  3.8355664964974203`*^9}, {3.835566875435747*^9, 3.8355668966153717`*^9}, {
  3.835567001842843*^9, 3.835567123265654*^9}, {3.8355674835174904`*^9, 
  3.835567490603381*^9}, {3.835567547623008*^9, 3.8355675501615067`*^9}, {
  3.835568428304388*^9, 3.8355684339766808`*^9}, {3.835568482528823*^9, 
  3.8355685656499662`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    RowBox[{"8", " ", "\[Pi]"}], "3"], ",", 
   FractionBox[
    RowBox[{"8", " ", "\[Pi]"}], "3"], ",", 
   FractionBox[
    RowBox[{"8", " ", "\[Pi]"}], "3"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.835567491319947*^9, 3.835567551164547*^9, 3.8355680520796547`*^9, {
   3.835568416885767*^9, 3.835568435094825*^9}, 3.8355684938379517`*^9, {
   3.835568525210063*^9, 3.8355685661605563`*^9}}]
}, Open  ]],

Cell["Verify the states are orthogonal", "Text",
 CellChangeTimes->{{3.8355685778779545`*^9, 3.8355685893569975`*^9}}],

Cell[BoxData[{
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"rh", ".", 
     RowBox[{"conj", "[", "pi", "]"}]}], " ", 
    RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"lh", ".", 
     RowBox[{"conj", "[", "pi", "]"}]}], " ", 
    RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"lh", ".", 
     RowBox[{"conj", "[", "rh", "]"}]}], " ", 
    RowBox[{"Sin", "[", "\[Theta]", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8355671491857166`*^9, 3.8355671639105687`*^9}, {
  3.8355672164547663`*^9, 3.8355672408076243`*^9}, {3.8355673398624754`*^9, 
  3.8355674169465103`*^9}, {3.835567449802477*^9, 3.8355674504074697`*^9}, {
  3.8355680668541236`*^9, 3.8355680983080597`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PolarPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lh", ".", 
         RowBox[{"conj", "[", "lh", "]"}]}], "+", 
        RowBox[{"rh", ".", 
         RowBox[{"conj", "[", "rh", "]"}]}]}], ")"}], 
      FractionBox["3", 
       RowBox[{"8", "\[Pi]"}]]}], ",", 
     RowBox[{
      RowBox[{"pi", ".", 
       RowBox[{"conj", "[", "pi", "]"}]}], 
      FractionBox["3", 
       RowBox[{"8", "\[Pi]"}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<P(\[Sigma]+ or \[Sigma]-)\>\"", ",", "\"\<P(\[Pi])\>\""}], 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8355686036759763`*^9, 3.835568676849372*^9}, {
  3.8355687185697713`*^9, 3.8355687771102123`*^9}, {3.8355689214410105`*^9, 
  3.835568962282485*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{}, {}}, {}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
4FsV1m7oXrWBeJWUtVffeBV+2PF8RSWpB50x1x8ORVXY8KPV7i2pn5xOj+/d
MVXoJohv/1dflcIRO/f4VKFX7rgmC3Fnir6VgG4VFsV/n19B6rFF0cwj6UAV
SsTKnwkg9bqCS+XDNtEqtP8p0PqL1PfGdX0/L8xWYmTiPa5xUv83bYbzl41V
4kYfpyV14mNK5sPlzZXo+6x6az7plxYhnaY90ZWY7almfoX008stG8szD1Ti
wNyztHTSb3fdGOvjRCsxM+Ro4dsoCuVe79sZs6oST8z8OilJPAsKycXPKkgu
SXGLJf27yc56t6FvBVrf/RuvSfo9mHX13wTbCuxP8HGzJfPgqrJ89fszFUjP
61MOJvPCbW7VUsrWChw4o1xfTebJy7GVtgE95bjY9yfyfRCFT/atEeGrKkfp
DYU/pgIpPNC6drIitRzb+haSJgMofECNday5Vo7yxs+G/yPzq8DF6+g+gXIs
PsWlHEXmXYw74/Y12zJUWXyhf+UGOa+XDjuYp8twckN04IbrpH+5Ur/vUyrD
PTHBQs1kvq6ter5aek0ZOrVHlPGS+cs5zuOaXVSK9VkPf4XYkfMq+mHb+aEE
08Pzxd8aE594+0ZGoAg3mRiUxWtQyN6x7+Lcp0JsshuVmSX3g6nrMeUBqhD1
bZooTVVyH/glHR61KcSBCRmnr8qk3/663Vpd9xhPnH9+RprcP7sKu9YumRZg
k81U8wVpCvX7RBpbqUfY7KvEv8RF+vmsU5x24iNM/nNpXoeT3D+bLTPfuz5C
5af7wzJWU9gap8F/YfsjHLbkktFaQeYpTzj/rvBcPOu0nS+ahcI3tx4cDzXP
QZc+/QTj94hfMt3kCvmy0Oxm2hv7MsT/HtZ5Js9n4mfu3vkdxYihKQE/Uvsy
cZb1wcvJAkSDq2kyY8GZuIZSi7XPRlx4Mmi8fTEDX1Acl0LjED0i5CJXv0hH
x/vd6qo+iEW6J8aLHFPwucnE4zkdxMqDm5R4t6ag4f0BL8YJRKvxgOTEZ8l4
uaHvVaEmYtt9datNx5Oxdup0+S0VxD0tJyrKtybhPs+djjr7yOuT1JjKu3g0
2cT5/JMwov+vXo/2lHjkia67ILCZvJ+dW5vduXj86LDZX5sf8VNXlAJPZxw6
HHop1MSLyN19+DyjMBZviapJz68g39fpkz7lGY0Nshp8vvN0nOA00RPaH42Z
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
B4z8rLWu1qLUzxfikj2d4DXAXdGqUYMan1ltLwx3wuTSAZ/SvTWYm7n1UPCr
TshWijx6d0sNLvT+PdW70Ak5w/Z9v37SMPnLvo4liS7QfGYg/K2AhntnS1Ke
e3RB+ycj6b1raHjpz3FNM/FuYC7bWSLXWIWaH4+suirbDZPFvTLPcqowZJ2S
5NWD3WAo/aXOKawKjf+vhnv/hjqP4zjuUtRpli10oSidkS7TxW5Cw3upxVlJ
56xqXUKOMUms6zCjNhJDgyGjyaXS0rgtMYl1fZeodma+n7ViR3KrZBlHpyjb
bLZ2ftkfH788f3j9AS+5xOrQYRnIo7hHjwfeRdeOgKpMrgzODlqzLbXu4s2m
AztnKRkYeG1+3ezYiGtPMF1cB2XQsZCmRaM34oyQ0Zr/QgaTZmaeHrRG1O9I
LFrxtww6ZycnBEN3sHV8z/kICzlwkofd13DuYN+3U2azEXLg5ow6hVVJcfRp
QX5aghwMn/jc5gmlqFrexF+ZIoe23W21ifFSZAl4tboiOVwym6hzcJaiQtAd
7tUiB8avTa5PlQ3Y9Y8vSdRWQPm59KgC7QbkpfRdaOYrYIXYuyNCWIdXzjJD
zYUKCA38KFX61qGw0m0x8YoCXi7mOtCt6jDy6QrT5bcUoB37vCG8vRZV74yM
RfcVcKxJl1Hz1y8IefNvD31QwJTboxPr7WvQk/9dueqTAmjMuQf9OjUo7nZP
SFpKQbdzfUmsohqt7Ib9OasocPEbCGEFVmMDz82+dzsFhc1Vl80vViF01ep+
4U+BjbeF0arfKtCkemBo8CQFHYHSYPe8Cmxo5R8RsynwNTq195RPBU4z3dUz
MRSs7A/ZyZqWYM9NetR8BgW8vpFPPsskqLKk18RJKSjq2bbR36Ucp79v12E3
UxBe/kHisrwcFzdK+B7tFBiO35sx6S3DLmXmZ1UPBSSTkZp6ogwDHlstXBjU
WNLSnpzwMypNa+pWfqRA3GvDsqksxeoB84MlnyloLEpX7WOXYs52prXJEgLH
jr+t2WpViutclZ1/0Ah01/Rvk7jdQMvFG/7xGwhUBtwbEjCvYd5ExbXoTQTs
/Rjc8JYSnEwxfu9HJxBvdyDY2rYED3jSqX92EKh+NJfK3FWMw7SRmKD9mp4w
ZPOYRSGmrX7fpHAi0HZmwKa1+CoastLHrVwIvNkyFJuw5iqeLumnyt0JzGrz
dYsNxLhlyeukh94E+vRTmsQfRegwTh29eZxAZ3xtbQFHhBPWjTNhvgTuq6cI
720+Th1ea98dSKDfOOjLfycvY5tF6lhJGIEsteOm+d5ctGzVM38VTmDmE0O9
3yMXbV/WL5hGEoh+VbjkxSUhshMptlcMgYx9LQEHY7PRRGWr9owjsHuycyew
s1Ckf3e1A4cAX4cVvcZPgMOVu6aHuASEm6KDWS6ZmBax7qowiUD9KL94ZG8G
uv8493DPOQLz54v87bbyMTuotNApmUCLzRZhkWEaKh/42FWlENgg/Cm7XOci
Dv4gP6SdSkB0Mp1x5f0FdHj2juKmEejSehO591ky5kOmbVE6gWLZgqO8+Dyu
Izm0Sj6BHmrZ+qUp55CKdD5clkFAz+C2vlloEr7evKgWZBIIjVXmGnpw0dLA
3iD4EoGQjk63V7sS0D8qL5MuICCJU7VfN47HM3c6Tv+pcd2YZYqTOgadwwrq
47IImM6doT8aicLnXoa+WtkEeJxlHM7FCDTydg7lajxzu0ri4BmG1/OD+sc0
1nus+jxmwsKgwPtlX+Vo9iPOt8JHg1DfUfkkTmOG3oO4Hk8fDJ36OqRMY1qM
70PR6BEUe2d5o8Y7fpca3Bj9Bv//O/L3rexKHcpt/w+1LkIp
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1: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
6yS+twTv015jBdLHMelxtvW3yUkCcXLXiOIuPlzf/b743eoY4UP5R16brWP4
m/XzS02zEYLxbMaefWqcmEggVSkSBgmJy2p750cO4InHuzz9THoIFUnMIf8l
sSPHodTf2VydhB8bRbx3YtjQJ0eP7ePnDkKYyYgRRyAz3hRULSnMayI0HE0t
pzdiRGE37zN7tGoJAiOOzgU125GzZ2MkbKKMwMVz/MNfj2143kjhaX1VISGV
JuEcn9Ua5clBx5NlS5kELWEJvoX+RcqsEusg//EkwhFm2a/PT/6knE31TNYT
DiM8549LPJs2S8m9ZMPFNetB0DB+rM5DnKA47UkL+hRgSfDsr1kQTB6kFA9t
9vSHXieUR9vQqFxtomxcnX/itVuEYNg0rTunnki5Sve5fvrF30s7itP+/Vw0
pBw4GT3HX1ZJJi/bCEj9IVKOmLalVnFxUjwvXinxj+2k7Fi5pLDPSYHib2Zm
Ya/9gpKYN/bf2iMjyl+Tjr7vYe8oX0x5CbRnnSlP0xRDa0W/UFyXleqUzgVS
BpP/sHi+nqfEaz7w/089hsK9Po7KO/5RJClFhCPqaRSvAwt7Wg9tUcgXTl7j
Ms+jnNYbiDCMpUM6necj00eIlDF2yetHaBjwG1nm2CBHFaU58p1M0hwTaizK
/En5UE9Jmr41OMbDisV3j/x6W9FKiQ4ewbpd+/B04ukEHcJDSs3Y+6ILsYdw
YDQrnNjZRxmoU9vxjPcoPkioXLFbHKJ8/Lge82SVC70Hfq5zfH1GiQz3O9jH
y4/F1vVX+GbHKR1/yOWj5gKYPRzIv/JvivJJb7bi08MTaHt9OHc3+R2lmXuN
a/3ZGeSZe3RR6dtHytehHRdXO89hxPGVzktv5ih0msIbtqeEMbyi7+ka63cK
Xi9oKBQQw/6F13eFi+YpDn78HMtPpPATk/hl3/RVSpvHUP/2zktYlUDXIuGy
QZnOeH9tqRewOv7B7DVZGjTIy7x7hk4Of+j2+R3Jp0PvHdOO14hK6GQUeiq/
bhd+Yn9aQjerjGxidOf46PZgIW2vOdNJVQwWO6g9JsmCkl/P7tg7rIa2rgz5
u6fY8KHRiJYiRRM3Gf+tdC8cwDD6p53y/tfwPX9BRBnxEI7Od74wlLuOdk9U
70/ac6IU26HTU2NaqHFXPuXDYS6c++Do1HlOF835CUupZnz46pbvYXaiEeYn
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
i7v8
         "]]}}}, {}, {{{}, {}, {}, {}}, {}}}, {
    PlotRange -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     PlotRangePadding -> Scaled[0.02], DisplayFunction -> Identity, Axes -> 
     True, AxesOrigin -> {0, 0}, 
     CoordinatesToolOptions -> {"DisplayFunction" -> ({
         Sqrt[Part[#, 1]^2 + Part[#, 2]^2], 
         Mod[
          ArcTan[
           Part[#, 1], 
           Part[#, 2]], 2 Pi]}& ), "CopiedValueFunction" -> ({
         Sqrt[Part[#, 1]^2 + Part[#, 2]^2], 
         Mod[
          ArcTan[
           Part[#, 1], 
           Part[#, 2]], 2 Pi]}& )}, DisplayFunction :> Identity, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
         Directive[
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.560181, 0.691569, 0.194885], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.922526, 0.385626, 0.209179], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.528488, 0.470624, 0.701351], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.772079, 0.431554, 0.102387], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.363898, 0.618501, 0.782349], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[1, 0.75, 0], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.647624, 0.37816, 0.614037], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.571589, 0.586483, 0.], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.915, 0.3325, 0.2125], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[
          0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
          AbsoluteThickness[1.6]], 
         Directive[
          RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
          AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05]}, 
     PlotRange -> {{-0.23873235883900312`, 
      0.23873241463784298`}, {-0.12994945951394263`, 0.12994946620595177`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {
       Scaled[0.02], 
       Scaled[0.02]}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"P(\[Sigma]+ or \[Sigma]-)\"", "\"P(\[Pi])\""}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8355686356559253`*^9, 3.8355686410988398`*^9}, 
   3.8355686778850727`*^9, 3.835568749896245*^9, 3.835568967931996*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{766, 812},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
Magnification->1.25,
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 109, 1, 127, "Title"],
Cell[692, 25, 2271, 64, 333, "Input"],
Cell[2966, 91, 495, 14, 62, "Input"],
Cell[3464, 107, 402, 10, 37, "Input"],
Cell[3869, 119, 950, 30, 79, InheritFromParent],
Cell[CellGroupData[{
Cell[4844, 153, 98, 1, 86, "Section"],
Cell[4945, 156, 142, 1, 38, "Text"],
Cell[5090, 159, 1335, 37, 167, "Input"],
Cell[CellGroupData[{
Cell[6450, 200, 357, 9, 37, "Input"],
Cell[6810, 211, 1164, 33, 54, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8011, 249, 268, 7, 37, "Input"],
Cell[8282, 258, 98, 1, 37, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8417, 264, 147, 2, 37, "Input"],
Cell[8567, 268, 562, 17, 65, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9166, 290, 128, 2, 37, "Input"],
Cell[9297, 294, 573, 15, 65, "Output"]
}, Open  ]],
Cell[9885, 312, 162, 3, 38, "Text"],
Cell[CellGroupData[{
Cell[10072, 319, 1014, 23, 62, "Input"],
Cell[11089, 344, 453, 12, 54, "Output"]
}, Open  ]],
Cell[11557, 359, 118, 1, 38, "Text"],
Cell[11678, 362, 1415, 37, 86, "Input"],
Cell[CellGroupData[{
Cell[13118, 403, 955, 28, 99, "Input"],
Cell[14076, 433, 61630, 1079, 266, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

